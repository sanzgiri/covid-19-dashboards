{
  
    
        "post0": {
            "title": "Linear Regression for R_t (difference) for Indian States",
            "content": "We run a linear regression for the difference in R_t for 15 states in India over a period from April 2nd and May 9th. The endogenous variable is the difference in Rt. The exogenous variables are difference in Covid19 testing rates, the Human Development Index for the state, the Governance Index for the state and the per Capita Health Care Expenditure in the state. . #!pip install statsmodels . import pandas as pd import statsmodels.api as sm . Load india_state_data worksheet . ind_data = pd.read_csv(&#39;india_state_data.csv&#39;) . ind_data = ind_data.rename(columns={&#39;diff&#39;: &#39;rt_diff&#39;, &#39;testing2ndapr&#39;:&#39;test1&#39;, &#39;test 9may&#39;: &#39;test2&#39;}) ind_data[&#39;test_diff&#39;] = ind_data[&#39;test2&#39;] - ind_data[&#39;test1&#39;] . ind_data.head() . States Rt2ndapril Rt9may rt_diff test1 test2 test diff log(test diff) hdi governance pche interaction test_diff . 0 AP | 2.18 | 0.98 | 1.20 | 21 | 3121 | 3100 | 8.039 | 0.650 | 5.05 | 1013 | 5.225349 | 3100 | . 1 BR | 1.72 | 1.10 | 0.62 | 25 | 286 | 261 | 5.565 | 0.576 | 4.40 | 491 | 3.205440 | 261 | . 2 DL | 2.05 | 1.12 | 0.93 | 143 | 4591 | 4448 | 8.400 | 0.746 | 5.62 | 1992 | 6.266400 | 4448 | . 3 GJ | 1.35 | 1.06 | 0.29 | 66 | 1716 | 1650 | 7.409 | 0.672 | 5.04 | 1189 | 4.978848 | 1650 | . 4 HR | 1.96 | 1.15 | 0.81 | 48 | 1945 | 1897 | 7.548 | 0.708 | 5.00 | 1119 | 5.343984 | 1897 | . ind_data2 = ind_data[[&#39;rt_diff&#39;, &#39;test_diff&#39;, &#39;hdi&#39;, &#39;governance&#39;, &#39;pche&#39;]].copy() ind_data2.columns . Index([&#39;rt_diff&#39;, &#39;test_diff&#39;, &#39;hdi&#39;, &#39;governance&#39;, &#39;pche&#39;], dtype=&#39;object&#39;) . ind_data2.head() . rt_diff test_diff hdi governance pche . 0 1.20 | 3100 | 0.650 | 5.05 | 1013 | . 1 0.62 | 261 | 0.576 | 4.40 | 491 | . 2 0.93 | 4448 | 0.746 | 5.62 | 1992 | . 3 0.29 | 1650 | 0.672 | 5.04 | 1189 | . 4 0.81 | 1897 | 0.708 | 5.00 | 1119 | . MinMax Normalization of all columns . for c in ind_data2.columns.values: mmin = ind_data2[c].min() mmax = ind_data2[c].max() ind_data2[c] = (ind_data2[c] - mmin) / (mmax-mmin) . y = ind_data2.rt_diff.values X = ind_data2[[&#39;test_diff&#39;, &#39;hdi&#39;, &#39;governance&#39;, &#39;pche&#39;]] . model = sm.OLS(y, X) results = model.fit() print(results.summary()) . OLS Regression Results ======================================================================================= Dep. Variable: y R-squared (uncentered): 0.732 Model: OLS Adj. R-squared (uncentered): 0.634 Method: Least Squares F-statistic: 7.505 Date: Fri, 11 Nov 2022 Prob (F-statistic): 0.00361 Time: 04:23:45 Log-Likelihood: -0.89814 No. Observations: 15 AIC: 9.796 Df Residuals: 11 BIC: 12.63 Df Model: 4 Covariance Type: nonrobust ============================================================================== coef std err t P&gt;|t| [0.025 0.975] test_diff 0.5534 0.555 0.998 0.340 -0.668 1.774 hdi -0.4396 0.520 -0.846 0.416 -1.583 0.704 governance 0.7055 0.369 1.912 0.082 -0.107 1.518 pche -0.0758 0.668 -0.114 0.912 -1.545 1.394 ============================================================================== Omnibus: 0.302 Durbin-Watson: 1.605 Prob(Omnibus): 0.860 Jarque-Bera (JB): 0.434 Skew: -0.249 Prob(JB): 0.805 Kurtosis: 2.332 Cond. No. 12.2 ============================================================================== Notes: [1] R² is computed without centering (uncentered) since the model does not contain a constant. [2] Standard Errors assume that the covariance matrix of the errors is correctly specified. . /opt/hostedtoolcache/Python/3.6.15/x64/lib/python3.6/site-packages/scipy/stats/stats.py:1604: UserWarning: kurtosistest only valid for n&gt;=20 ... continuing anyway, n=15 &#34;anyway, n=%i&#34; % int(n)) . Add Interaction Term . ind_data2[&#39;xterm&#39;] = ind_data2[&#39;test_diff&#39;]*ind_data2[&#39;hdi&#39;] . X = ind_data2[[&#39;test_diff&#39;, &#39;hdi&#39;, &#39;governance&#39;, &#39;pche&#39;, &#39;xterm&#39;]] . model2 = sm.OLS(y, X) results2 = model2.fit() print(results2.summary()) . OLS Regression Results ======================================================================================= Dep. Variable: y R-squared (uncentered): 0.760 Model: OLS Adj. R-squared (uncentered): 0.640 Method: Least Squares F-statistic: 6.340 Date: Fri, 11 Nov 2022 Prob (F-statistic): 0.00666 Time: 04:23:45 Log-Likelihood: -0.060217 No. Observations: 15 AIC: 10.12 Df Residuals: 10 BIC: 13.66 Df Model: 5 Covariance Type: nonrobust ============================================================================== coef std err t P&gt;|t| [0.025 0.975] test_diff 1.2916 0.874 1.478 0.170 -0.656 3.239 hdi -0.2276 0.551 -0.413 0.688 -1.455 1.000 governance 0.5859 0.382 1.533 0.156 -0.266 1.437 pche -0.2638 0.684 -0.385 0.708 -1.789 1.261 xterm -1.0424 0.959 -1.087 0.302 -3.179 1.094 ============================================================================== Omnibus: 0.960 Durbin-Watson: 1.801 Prob(Omnibus): 0.619 Jarque-Bera (JB): 0.446 Skew: -0.415 Prob(JB): 0.800 Kurtosis: 2.848 Cond. No. 17.8 ============================================================================== Notes: [1] R² is computed without centering (uncentered) since the model does not contain a constant. [2] Standard Errors assume that the covariance matrix of the errors is correctly specified. . /opt/hostedtoolcache/Python/3.6.15/x64/lib/python3.6/site-packages/scipy/stats/stats.py:1604: UserWarning: kurtosistest only valid for n&gt;=20 ... continuing anyway, n=15 &#34;anyway, n=%i&#34; % int(n)) . Misc Analysis . sm.stats.linear_rainbow(results) . (1.56889693867147, 0.38823518172143395) . sm.graphics.plot_partregress(&#39;rt_diff&#39;, &#39;test_diff&#39;, [&#39;hdi&#39;, &#39;governance&#39;, &#39;pche&#39;], data=ind_data2, obs_labels=False) . findfont: Font family [&#39;sans-serif&#39;] not found. Falling back to DejaVu Sans. findfont: Font family [&#39;sans-serif&#39;] not found. Falling back to DejaVu Sans. findfont: Font family [&#39;sans-serif&#39;] not found. Falling back to DejaVu Sans. . model = sm.OLS(y, X) results = model.fit_regularized(L1_wt=0.0) print(results.params) . [ 1.29155843 -0.22758562 0.58588266 -0.2638172 -1.04244082] .",
            "url": "https://sanzgiri.github.io/covid-19-dashboards/covid/2022/11/10/Rt_MLR_Indian_States.html",
            "relUrl": "/covid/2022/11/10/Rt_MLR_Indian_States.html",
            "date": " • Nov 10, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Realtime R_0 for USA by county",
            "content": "import pandas as pd import numpy as np from matplotlib import pyplot as plt from matplotlib.dates import date2num, num2date from matplotlib import dates as mdates from matplotlib import ticker from matplotlib.colors import ListedColormap from matplotlib.patches import Patch from scipy import stats as sps from scipy.interpolate import interp1d from IPython.display import clear_output import ipywidgets as widgets FILTERED_REGIONS = [ &#39;Virgin Islands&#39;, &#39;American Samoa&#39;, &#39;Northern Mariana Islands&#39;, &#39;Guam&#39;, &#39;Puerto Rico&#39;] FILTERED_REGION_CODES = [&#39;AS&#39;, &#39;GU&#39;, &#39;PR&#39;, &#39;VI&#39;, &#39;MP&#39;] %config InlineBackend.figure_format = &#39;retina&#39; . def highest_density_interval(pmf, p=.9): # If we pass a DataFrame, just call this recursively on the columns if(isinstance(pmf, pd.DataFrame)): return pd.DataFrame([highest_density_interval(pmf[col], p=p) for col in pmf], index=pmf.columns) cumsum = np.cumsum(pmf.values) best = None for i, value in enumerate(cumsum): for j, high_value in enumerate(cumsum[i+1:]): if (high_value-value &gt; p) and (not best or j&lt;best[1]-best[0]): best = (i, i+j+1) break low = pmf.index[best[0]] high = pmf.index[best[1]] return pd.Series([low, high], index=[f&#39;Low_{p*100:.0f}&#39;, f&#39;High_{p*100:.0f}&#39;]) . Real-World Application to US Data (by counties) . Setup . Load US state case data from CovidTracking.com . url_counties = &#39;https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv&#39; counties = pd.read_csv(url_counties) . state_list = sorted(set(counties.state.unique()) - set(FILTERED_REGIONS)) len(state_list) # Include District of Columbia . 51 . w = widgets.Dropdown( options=state_list, value=&#39;Oregon&#39;, description=&#39;Select state:&#39;, disabled=False, ) display(w) . Filters . Selected state | Remove counties listed as &quot;Unknown&quot; | Remove rows with less than county_case_filter cases | Remove counties with less than county_row_filter rows after smoothing | . county_case_filter = 10 county_row_filter = 10 . selected_state = w.value counties = counties[counties.state==selected_state].copy() counties = counties[counties.county!=&quot;Unknown&quot;].copy() counties = counties[counties.cases &gt;= county_case_filter].copy() counties.shape . (26157, 6) . counties.head() . date county state fips cases deaths . 1550 2020-03-12 | Washington | Oregon | 41067.0 | 10 | 0.0 | . 1846 2020-03-13 | Washington | Oregon | 41067.0 | 10 | 0.0 | . 2207 2020-03-14 | Washington | Oregon | 41067.0 | 13 | 0.0 | . 2621 2020-03-15 | Linn | Oregon | 41043.0 | 10 | 0.0 | . 2626 2020-03-15 | Washington | Oregon | 41067.0 | 13 | 0.0 | . counties = counties[[&#39;date&#39;, &#39;county&#39;, &#39;cases&#39;]].copy() counties[&#39;date&#39;] = pd.to_datetime(counties[&#39;date&#39;]) counties = counties.set_index([&#39;county&#39;, &#39;date&#39;]).squeeze().sort_index() . counties . county date Baker 2020-07-11 11 2020-07-12 12 2020-07-13 12 2020-07-14 12 2020-07-15 13 ... Yamhill 2022-05-09 18138 2022-05-10 18179 2022-05-11 18207 2022-05-12 18244 2022-05-13 18265 Name: cases, Length: 26157, dtype: int64 . counties_g = counties.groupby([&#39;county&#39;]).count().reset_index().rename({&#39;cases&#39;:&#39;rows&#39;}, axis=1) counties_g . county rows . 0 Baker | 672 | . 1 Benton | 775 | . 2 Clackamas | 785 | . 3 Clatsop | 739 | . 4 Columbia | 765 | . 5 Coos | 748 | . 6 Crook | 686 | . 7 Curry | 664 | . 8 Deschutes | 783 | . 9 Douglas | 772 | . 10 Gilliam | 581 | . 11 Grant | 595 | . 12 Harney | 648 | . 13 Hood River | 740 | . 14 Jackson | 776 | . 15 Jefferson | 745 | . 16 Josephine | 775 | . 17 Klamath | 771 | . 18 Lake | 687 | . 19 Lane | 776 | . 20 Lincoln | 717 | . 21 Linn | 790 | . 22 Malheur | 743 | . 23 Marion | 786 | . 24 Morrow | 739 | . 25 Multnomah | 785 | . 26 Polk | 778 | . 27 Sherman | 651 | . 28 Tillamook | 682 | . 29 Umatilla | 765 | . 30 Union | 701 | . 31 Wallowa | 682 | . 32 Wasco | 762 | . 33 Washington | 793 | . 34 Wheeler | 522 | . 35 Yamhill | 778 | . county_list = counties_g[counties_g.rows &gt;= county_row_filter][&#39;county&#39;].tolist() len(county_list) . 36 . def prepare_cases(cases, cutoff=1): new_cases = cases.diff() smoothed = new_cases.rolling(7, win_type=&#39;gaussian&#39;, min_periods=1, center=True).mean(std=3).round() idx_start = np.searchsorted(smoothed, cutoff) smoothed = smoothed.iloc[idx_start:] original = new_cases.loc[smoothed.index] return original, smoothed . # Gamma is 1/serial interval # https://wwwnc.cdc.gov/eid/article/26/7/20-0282_article # https://www.nejm.org/doi/full/10.1056/NEJMoa2001316 GAMMA = 1/7 # We create an array for every possible value of Rt R_T_MAX = 12 r_t_range = np.linspace(0, R_T_MAX, R_T_MAX*100+1) def get_posteriors(sr, sigma=0.15): # (1) Calculate Lambda lam = sr[:-1].values * np.exp(GAMMA * (r_t_range[:, None] - 1)) # (2) Calculate each day&#39;s likelihood likelihoods = pd.DataFrame( data = sps.poisson.pmf(sr[1:].values, lam), index = r_t_range, columns = sr.index[1:]) # (3) Create the Gaussian Matrix process_matrix = sps.norm(loc=r_t_range, scale=sigma ).pdf(r_t_range[:, None]) # (3a) Normalize all rows to sum to 1 process_matrix /= process_matrix.sum(axis=0) # (4) Calculate the initial prior prior0 = sps.gamma(a=4).pdf(r_t_range) prior0 /= prior0.sum() # Create a DataFrame that will hold our posteriors for each day # Insert our prior as the first posterior. posteriors = pd.DataFrame( index=r_t_range, columns=sr.index, data={sr.index[0]: prior0} ) # We said we&#39;d keep track of the sum of the log of the probability # of the data for maximum likelihood calculation. log_likelihood = 0.0 # (5) Iteratively apply Bayes&#39; rule for previous_day, current_day in zip(sr.index[:-1], sr.index[1:]): #(5a) Calculate the new prior current_prior = process_matrix @ posteriors[previous_day] #(5b) Calculate the numerator of Bayes&#39; Rule: P(k|R_t)P(R_t) numerator = likelihoods[current_day] * current_prior #(5c) Calcluate the denominator of Bayes&#39; Rule P(k) denominator = np.sum(numerator) # Execute full Bayes&#39; Rule posteriors[current_day] = numerator/denominator # Add to the running sum of log likelihoods log_likelihood += np.log(denominator+1) return posteriors, log_likelihood . sigmas = np.linspace(1/20, 1, 20) targets = counties.index.get_level_values(&#39;county&#39;).isin(county_list) counties_to_process = counties.loc[targets] results = {} failed_counties = [] skipped_counties = [] for county_name, cases in counties_to_process.groupby(level=&#39;county&#39;): print(county_name) new, smoothed = prepare_cases(cases, cutoff=1) if len(smoothed) &lt; 5: skipped_counties.append(county_name) continue result = {} # Holds all posteriors with every given value of sigma result[&#39;posteriors&#39;] = [] # Holds the log likelihood across all k for each value of sigma result[&#39;log_likelihoods&#39;] = [] try: for sigma in sigmas: posteriors, log_likelihood = get_posteriors(smoothed, sigma=sigma) result[&#39;posteriors&#39;].append(posteriors) result[&#39;log_likelihoods&#39;].append(log_likelihood) # Store all results keyed off of state name results[county_name] = result # clear_output(wait=True) except: failed_counties.append(county_name) print(f&quot;Posteriors failed for {county_name}&quot;) print(f&quot;Posteriors failed for {len(failed_counties)} counties: {failed_counties}&quot;) print(f&quot;Skipped {len(skipped_counties)} counties: {skipped_counties}&quot;) print(f&quot;Continuing with {len(results)} counties / {len(county_list)}&quot;) print(&#39;Done.&#39;) . Baker Benton Clackamas Clatsop Columbia Coos Crook Curry Deschutes Douglas Gilliam Grant Harney Hood River Jackson Jefferson Josephine Klamath Lake Lane Lincoln Linn Malheur Marion Morrow Multnomah Polk Sherman Tillamook Umatilla Union Wallowa Wasco Washington Wheeler Yamhill Posteriors failed for 0 counties: [] Skipped 0 counties: [] Continuing with 36 counties / 36 Done. . # Each index of this array holds the total of the log likelihoods for # the corresponding index of the sigmas array. total_log_likelihoods = np.zeros_like(sigmas) # Loop through each state&#39;s results and add the log likelihoods to the running total. for county_name, result in results.items(): total_log_likelihoods += result[&#39;log_likelihoods&#39;] # Select the index with the largest log likelihood total max_likelihood_index = total_log_likelihoods.argmax() # print(max_likelihood_index) # Select the value that has the highest log likelihood sigma = sigmas[max_likelihood_index] # Plot it fig, ax = plt.subplots() ax.set_title(f&quot;Maximum Likelihood value for $ sigma$ = {sigma:.2f}&quot;); ax.plot(sigmas, total_log_likelihoods) ax.axvline(sigma, color=&#39;k&#39;, linestyle=&quot;:&quot;) . &lt;matplotlib.lines.Line2D at 0x7efd6be01518&gt; . findfont: Font family [&#39;sans-serif&#39;] not found. Falling back to DejaVu Sans. findfont: Font family [&#39;sans-serif&#39;] not found. Falling back to DejaVu Sans. . sigma . 0.05 . Compile Final Results . Given that we&#39;ve selected the optimal $ sigma$, let&#39;s grab the precalculated posterior corresponding to that value of $ sigma$ for each state. Let&#39;s also calculate the 90% and 50% highest density intervals (this takes a little while) and also the most likely value. . final_results = None hdi_error_list = [] for county_name, result in results.items(): print(county_name) try: posteriors = result[&#39;posteriors&#39;][max_likelihood_index] hdis_90 = highest_density_interval(posteriors, p=.9) hdis_50 = highest_density_interval(posteriors, p=.5) most_likely = posteriors.idxmax().rename(&#39;ML&#39;) result = pd.concat([most_likely, hdis_90, hdis_50], axis=1) if final_results is None: final_results = result else: final_results = pd.concat([final_results, result]) clear_output(wait=True) except: print(f&#39;hdi failed for {county_name}&#39;) hdi_error_list.append(county_name) pass print(f&#39;HDI error list: {hdi_error_list}&#39;) print(&#39;Done.&#39;) . Wheeler hdi failed for Wheeler Yamhill hdi failed for Yamhill HDI error list: [&#39;Baker&#39;, &#39;Benton&#39;, &#39;Clatsop&#39;, &#39;Columbia&#39;, &#39;Coos&#39;, &#39;Crook&#39;, &#39;Curry&#39;, &#39;Deschutes&#39;, &#39;Douglas&#39;, &#39;Gilliam&#39;, &#39;Grant&#39;, &#39;Harney&#39;, &#39;Hood River&#39;, &#39;Jackson&#39;, &#39;Josephine&#39;, &#39;Klamath&#39;, &#39;Lake&#39;, &#39;Lane&#39;, &#39;Lincoln&#39;, &#39;Linn&#39;, &#39;Malheur&#39;, &#39;Marion&#39;, &#39;Morrow&#39;, &#39;Polk&#39;, &#39;Sherman&#39;, &#39;Tillamook&#39;, &#39;Union&#39;, &#39;Wallowa&#39;, &#39;Wasco&#39;, &#39;Wheeler&#39;, &#39;Yamhill&#39;] Done. . Plot All Counties meeting criteria . def plot_rt(result, ax, county_name): ax.set_title(f&quot;{county_name}&quot;) # Colors ABOVE = [1,0,0] MIDDLE = [1,1,1] BELOW = [0,0,0] cmap = ListedColormap(np.r_[ np.linspace(BELOW,MIDDLE,25), np.linspace(MIDDLE,ABOVE,25) ]) color_mapped = lambda y: np.clip(y, .5, 1.5)-.5 index = result[&#39;ML&#39;].index.get_level_values(&#39;date&#39;) values = result[&#39;ML&#39;].values # Plot dots and line ax.plot(index, values, c=&#39;k&#39;, zorder=1, alpha=.25) ax.scatter(index, values, s=40, lw=.5, c=cmap(color_mapped(values)), edgecolors=&#39;k&#39;, zorder=2) # Aesthetically, extrapolate credible interval by 1 day either side lowfn = interp1d(date2num(index), result[&#39;Low_90&#39;].values, bounds_error=False, fill_value=&#39;extrapolate&#39;) highfn = interp1d(date2num(index), result[&#39;High_90&#39;].values, bounds_error=False, fill_value=&#39;extrapolate&#39;) extended = pd.date_range(start=pd.Timestamp(&#39;2020-03-01&#39;), end=index[-1]+pd.Timedelta(days=1)) ax.fill_between(extended, lowfn(date2num(extended)), highfn(date2num(extended)), color=&#39;k&#39;, alpha=.1, lw=0, zorder=3) ax.axhline(1.0, c=&#39;k&#39;, lw=1, label=&#39;$R_t=1.0$&#39;, alpha=.25); # Formatting ax.xaxis.set_major_locator(mdates.MonthLocator()) ax.xaxis.set_major_formatter(mdates.DateFormatter(&#39;%b&#39;)) ax.xaxis.set_minor_locator(mdates.DayLocator()) ax.yaxis.set_major_locator(ticker.MultipleLocator(1)) ax.yaxis.set_major_formatter(ticker.StrMethodFormatter(&quot;{x:.1f}&quot;)) ax.yaxis.tick_right() ax.spines[&#39;left&#39;].set_visible(False) ax.spines[&#39;bottom&#39;].set_visible(False) ax.spines[&#39;right&#39;].set_visible(False) ax.margins(0) ax.grid(which=&#39;major&#39;, axis=&#39;y&#39;, c=&#39;k&#39;, alpha=.1, zorder=-2) ax.margins(0) ax.set_ylim(0.0, 5.0) ax.set_xlim(pd.Timestamp(&#39;2020-03-01&#39;), result.index.get_level_values(&#39;date&#39;)[-1]+pd.Timedelta(days=1)) fig.set_facecolor(&#39;w&#39;) . ncols = 4 nrows = int(np.ceil(len(final_results.groupby(&#39;county&#39;)) / ncols)) fig, axes = plt.subplots(nrows=nrows, ncols=ncols, figsize=(15, nrows*3)) for i, (county_name, result) in enumerate(final_results.groupby(&#39;county&#39;)): plot_rt(result, axes.flat[i], county_name) fig.tight_layout() fig.set_facecolor(&#39;w&#39;) . Export Data to CSV . # Uncomment the following line if you&#39;d like to export the data final_results.to_csv(f&#39;data/rt_usa_{selected_state}_counties.csv&#39;) . Standings . FULL_COLOR = [.7,.7,.7] NONE_COLOR = [179/255,35/255,14/255] PARTIAL_COLOR = [.5,.5,.5] ERROR_BAR_COLOR = [.3,.3,.3] . final_results . ML Low_90 High_90 Low_50 High_50 . county date . Clackamas 2020-03-20 3.00 | 1.01 | 6.99 | 2.04 | 4.45 | . 2020-03-21 3.29 | 1.17 | 7.01 | 2.35 | 4.77 | . 2020-03-22 3.00 | 1.14 | 5.99 | 2.15 | 4.18 | . 2020-03-23 2.81 | 1.11 | 5.43 | 2.10 | 3.92 | . 2020-03-24 2.92 | 1.21 | 5.37 | 2.22 | 3.98 | . ... ... ... | ... | ... | ... | ... | . Washington 2022-05-09 1.22 | 0.97 | 1.47 | 1.14 | 1.35 | . 2022-05-10 1.28 | 1.05 | 1.55 | 1.21 | 1.42 | . 2022-05-11 1.37 | 1.13 | 1.62 | 1.27 | 1.47 | . 2022-05-12 1.42 | 1.19 | 1.67 | 1.35 | 1.55 | . 2022-05-13 1.27 | 1.04 | 1.51 | 1.21 | 1.41 | . 3845 rows × 5 columns . filtered = final_results.index.get_level_values(0).isin(FILTERED_REGIONS) mr = final_results.loc[~filtered].groupby(level=0)[[&#39;ML&#39;, &#39;High_90&#39;, &#39;Low_90&#39;]].last() def plot_standings(mr, figsize=None, title=&#39;Most Recent $R_t$ by State&#39;): if not figsize: figsize = ((15.9/50)*len(mr)+.1,2.5) fig, ax = plt.subplots(figsize=figsize) ax.set_title(title) err = mr[[&#39;Low_90&#39;, &#39;High_90&#39;]].sub(mr[&#39;ML&#39;], axis=0).abs() bars = ax.bar(mr.index, mr[&#39;ML&#39;], width=.825, color=FULL_COLOR, ecolor=ERROR_BAR_COLOR, capsize=2, error_kw={&#39;alpha&#39;:.5, &#39;lw&#39;:1}, yerr=err.values.T) labels = mr.index.to_series() ax.set_xticklabels(labels, rotation=90, fontsize=11) ax.margins(0) ax.set_ylim(0,2.) ax.axhline(1.0, linestyle=&#39;:&#39;, color=&#39;k&#39;, lw=1) fig.set_facecolor(&#39;w&#39;) return fig, ax mr.sort_values(&#39;ML&#39;, inplace=True) plot_standings(mr); . /opt/hostedtoolcache/Python/3.6.15/x64/lib/python3.6/site-packages/ipykernel_launcher.py:22: UserWarning: FixedFormatter should only be used together with FixedLocator findfont: Font family [&#39;sans-serif&#39;] not found. Falling back to DejaVu Sans. . mr.sort_values(&#39;High_90&#39;, inplace=True) plot_standings(mr); . /opt/hostedtoolcache/Python/3.6.15/x64/lib/python3.6/site-packages/ipykernel_launcher.py:22: UserWarning: FixedFormatter should only be used together with FixedLocator . show = mr[mr.High_90.le(1)].sort_values(&#39;ML&#39;) fig, ax = plot_standings(show, title=&#39;Likely Under Control&#39;); . show = mr[mr.Low_90.ge(1.0)].sort_values(&#39;Low_90&#39;) fig, ax = plot_standings(show, title=&#39;Likely Not Under Control&#39;); . /opt/hostedtoolcache/Python/3.6.15/x64/lib/python3.6/site-packages/ipykernel_launcher.py:22: UserWarning: FixedFormatter should only be used together with FixedLocator .",
            "url": "https://sanzgiri.github.io/covid-19-dashboards/covid/2022/11/10/Realtime_R0_USA_By_County.html",
            "relUrl": "/covid/2022/11/10/Realtime_R0_USA_By_County.html",
            "date": " • Nov 10, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Realtime R_0 for India by State (Updated)",
            "content": "Updated with latest changes to https://github.com/k-sys/covid-19/blob/master/Realtime%20R0.ipynb . from IPython.core.display import display, HTML display(HTML(&quot;&lt;style&gt;.container { width:100% !important; }&lt;/style&gt;&quot;)) . Estimating COVID-19&#39;s $R_t$ in Real-Time . Kevin Systrom - April 17 . In any epidemic, $R_t$ is the measure known as the effective reproduction number. It&#39;s the number of people who become infected per infectious person at time $t$. The most well-known version of this number is the basic reproduction number: $R_0$ when $t=0$. However, $R_0$ is a single measure that does not adapt with changes in behavior and restrictions. . As a pandemic evolves, increasing restrictions (or potential releasing of restrictions) changes $R_t$. Knowing the current $R_t$ is essential. When $R gg1$, the pandemic will spread through a large part of the population. If $R_t&lt;1$, the pandemic will slow quickly before it has a chance to infect many people. The lower the $R_t$: the more manageable the situation. In general, any $R_t&lt;1$ means things are under control. . The value of $R_t$ helps us in two ways. (1) It helps us understand how effective our measures have been controlling an outbreak and (2) it gives us vital information about whether we should increase or reduce restrictions based on our competing goals of economic prosperity and human safety. Well-respected epidemiologists argue that tracking $R_t$ is the only way to manage through this crisis. . Yet, today, we don&#39;t yet use $R_t$ in this way. In fact, the only real-time measure I&#39;ve seen has been for Hong Kong. More importantly, it is not useful to understand $R_t$ at a national level. Instead, to manage this crisis effectively, we need a local (state, county and/or city) granularity of $R_t$. . What follows is a solution to this problem at the US State level. It&#39;s a modified version of a solution created by Bettencourt &amp; Ribeiro 2008 to estimate real-time $R_t$ using a Bayesian approach. While this paper estimates a static $R$ value, here we introduce a process model with Gaussian noise to estimate a time-varying $R_t$. . If you have questions, comments, or improvments feel free to get in touch: hello@systrom.com. And if it&#39;s not entirely clear, I&#39;m not an epidemiologist. At the same time, data is data, and statistics are statistics and this is based on work by well-known epidemiologists so you can calibrate your beliefs as you wish. In the meantime, I hope you can learn something new as I did by reading through this example. Feel free to take this work and apply it elsewhere – internationally or to counties in the United States. . Additionally, a huge thanks to Frank Dellaert who suggested the addition of the process and to Adam Lerer who implemented the changes. Not only did I learn something new, it made the model much more responsive. . import pandas as pd import numpy as np from matplotlib import pyplot as plt from matplotlib.dates import date2num, num2date from matplotlib import dates as mdates from matplotlib import ticker from matplotlib.colors import ListedColormap from matplotlib.patches import Patch from scipy import stats as sps from scipy.interpolate import interp1d from IPython.display import clear_output FILTERED_REGIONS = [] FILTERED_REGION_CODES = [] %config InlineBackend.figure_format = &#39;retina&#39; . Bettencourt &amp; Ribeiro&#39;s Approach . Every day, we learn how many more people have COVID-19. This new case count gives us a clue about the current value of $R_t$. We also, figure that the value of $R_t$ today is related to the value of $R_{t-1}$ (yesterday&#39;s value) and every previous value of $R_{t-m}$ for that matter. . With these insights, the authors use Bayes&#39; rule to update their beliefs about the true value of $R_t$ based on how many new cases have been reported each day. . This is Bayes&#39; Theorem as we&#39;ll use it: . $$ P(R_t|k)= frac{P(k|R_t) cdot P(R_t)}{P(k)} $$ . This says that, having seen $k$ new cases, we believe the distribution of $R_t$ is equal to: . The likelihood of seeing $k$ new cases given $R_t$ times ... | The prior beliefs of the value of $P(R_t)$ without the data ... | divided by the probability of seeing this many cases in general. | . This is for a single day. To make it iterative: every day that passes, we use yesterday&#39;s prior $P(R_{t-1})$ to estimate today&#39;s prior $P(R_t)$. We will assume the distribution of $R_t$ to be a Gaussian centered around $R_{t-1}$, so $P(R_t|R_{t-1})= mathcal{N}(R_{t-1}, sigma)$, where $ sigma$ is a hyperparameter (see below on how we estimate $ sigma$). So on day one: . $$ P(R_1|k_1) propto P(R_1) cdot mathcal{L}(R_1|k_1)$$ . On day two: . $$ P(R_2|k_1,k_2) propto P(R_2) cdot mathcal{L}(R_2|k_2) = sum_{R_1} {P(R_1|k_1) cdot P(R_2|R_1) cdot mathcal{L}(R_2|k_2) }$$ . etc. . Choosing a Likelihood Function $P left(k_t|R_t right)$ . A likelihood function function says how likely we are to see $k$ new cases, given a value of $R_t$. . Any time you need to model &#39;arrivals&#39; over some time period of time, statisticians like to use the Poisson Distribution. Given an average arrival rate of $ lambda$ new cases per day, the probability of seeing $k$ new cases is distributed according to the Poisson distribution: . $$P(k| lambda) = frac{ lambda^k e^{- lambda}}{k!}$$ . # Column vector of k k = np.arange(0, 70)[:, None] # Different values of Lambda lambdas = [10, 20, 30, 40] # Evaluated the Probability Mass Function (remember: poisson is discrete) y = sps.poisson.pmf(k, lambdas) # Show the resulting shape print(y.shape) . (70, 4) . Note:this was a terse expression which makes it tricky. All I did was to make $k$ a column. By giving it a column for $k$ and a &#39;row&#39; for lambda it will evaluate the pmf over both and produce an array that has $k$ rows and lambda columns. This is an efficient way of producing many distributions all at once, and you will see it used again below! . fig, ax = plt.subplots() ax.set(title=&#39;Poisson Distribution of Cases n $p(k| lambda)$&#39;) plt.plot(k, y, marker=&#39;o&#39;, markersize=3, lw=0) plt.legend(title=&quot;$ lambda$&quot;, labels=lambdas); . findfont: Font family [&#39;sans-serif&#39;] not found. Falling back to DejaVu Sans. findfont: Font family [&#39;sans-serif&#39;] not found. Falling back to DejaVu Sans. . The Poisson distribution says that if you think you&#39;re going to have $ lambda$ cases per day, you&#39;ll probably get that many, plus or minus some variation based on chance. . But in our case, we know there have been $k$ cases and we need to know what value of $ lambda$ is most likely. In order to do this, we fix $k$ in place while varying $ lambda$. This is called the likelihood function. . For example, imagine we observe $k=20$ new cases, and we want to know how likely each $ lambda$ is: . k = 20 lam = np.linspace(1, 45, 90) likelihood = pd.Series(data=sps.poisson.pmf(k, lam), index=pd.Index(lam, name=&#39;$ lambda$&#39;), name=&#39;lambda&#39;) likelihood.plot(title=r&#39;Likelihood $P left(k_t=20| lambda right)$&#39;); . findfont: Font family [&#39;sans-serif&#39;] not found. Falling back to DejaVu Sans. . This says that if we see 20 cases, the most likely value of $ lambda$ is (not surprisingly) 20. But we&#39;re not certain: it&#39;s possible lambda was 21 or 17 and saw 20 new cases by chance alone. It also says that it&#39;s unlikely $ lambda$ was 40 and we saw 20. . Great. We have $P left( lambda_t|k_t right)$ which is parameterized by $ lambda$ but we were looking for $P left(k_t|R_t right)$ which is parameterized by $R_t$. We need to know the relationship between $ lambda$ and $R_t$ . Connecting $ lambda$ and $R_t$ . The key insight to making this work is to realize there&#39;s a connection between $R_t$ and $ lambda$. The derivation is beyond the scope of this notebook, but here it is: . $$ lambda = k_{t-1}e^{ gamma(R_t-1)}$$ . where $ gamma$ is the reciprocal of the serial interval (about 7 days for COVID19). Since we know every new case count on the previous day, we can now reformulate the likelihood function as a Poisson parameterized by fixing $k$ and varying $R_t$. . $$ lambda = k_{t-1}e^{ gamma(R_t-1)}$$ . $$P left(k|R_t right) = frac{ lambda^k e^{- lambda}}{k!}$$ . Evaluating the Likelihood Function . To continue our example, let&#39;s imagine a sample of new case counts $k$. What is the likelihood of different values of $R_t$ on each of those days? . k = np.array([20, 40, 55, 90]) # We create an array for every possible value of Rt R_T_MAX = 12 r_t_range = np.linspace(0, R_T_MAX, R_T_MAX*100+1) # Gamma is 1/serial interval # https://wwwnc.cdc.gov/eid/article/26/7/20-0282_article # https://www.nejm.org/doi/full/10.1056/NEJMoa2001316 GAMMA = 1/7 # Map Rt into lambda so we can substitute it into the equation below # Note that we have N-1 lambdas because on the first day of an outbreak # you do not know what to expect. lam = k[:-1] * np.exp(GAMMA * (r_t_range[:, None] - 1)) # Evaluate the likelihood on each day and normalize sum of each day to 1.0 likelihood_r_t = sps.poisson.pmf(k[1:], lam) likelihood_r_t /= np.sum(likelihood_r_t, axis=0) # Plot it ax = pd.DataFrame( data = likelihood_r_t, index = r_t_range ).plot( title=&#39;Likelihood of $R_t$ given $k$&#39;, xlim=(0,10), figsize=(6, 2.5) ) ax.legend(labels=k[1:], title=&#39;New Cases&#39;) ax.set_xlabel(&#39;$R_t$&#39;); . You can see that each day we have a independent guesses for $R_t$. The goal is to combine the information we have about previous days with the current day. To do this, we use Bayes&#39; theorem. . Performing the Bayesian Update . To perform the Bayesian update, we need to multiply the likelihood by the prior (which is just the previous day&#39;s likelihood without our Gaussian update) to get the posteriors. Let&#39;s do that using the cumulative product of each successive day: . posteriors = likelihood_r_t.cumprod(axis=1) posteriors = posteriors / np.sum(posteriors, axis=0) columns = pd.Index(range(1, posteriors.shape[1]+1), name=&#39;Day&#39;) posteriors = pd.DataFrame( data = posteriors, index = r_t_range, columns = columns) ax = posteriors.plot( title=&#39;Posterior $P(R_t|k)$&#39;, xlim=(0,10), figsize=(6,2.5) ) ax.legend(title=&#39;Day&#39;) ax.set_xlabel(&#39;$R_t$&#39;); . Notice how on Day 1, our posterior matches Day 1&#39;s likelihood from above? That&#39;s because we have no information other than that day. However, when we update the prior using Day 2&#39;s information, you can see the curve has moved left, but not nearly as left as the likelihood for Day 2 from above. This is because Bayesian updating uses information from both days and effectively averages the two. Since Day 3&#39;s likelihood is in between the other two, you see a small shift to the right, but more importantly: a narrower distribution. We&#39;re becoming more confident in our believes of the true value of $R_t$. . From these posteriors, we can answer important questions such as &quot;What is the most likely value of $R_t$ each day?&quot; . most_likely_values = posteriors.idxmax(axis=0) most_likely_values . Day 1 5.85 2 4.22 3 4.33 dtype: float64 . We can also obtain the highest density intervals for $R_t$: . def highest_density_interval(pmf, p=.9, debug=False): # If we pass a DataFrame, just call this recursively on the columns if(isinstance(pmf, pd.DataFrame)): return pd.DataFrame([highest_density_interval(pmf[col], p=p) for col in pmf], index=pmf.columns) cumsum = np.cumsum(pmf.values) # N x N matrix of total probability mass for each low, high total_p = cumsum - cumsum[:, None] # Return all indices with total_p &gt; p lows, highs = (total_p &gt; p).nonzero() # Find the smallest range (highest density) best = (highs - lows).argmin() low = pmf.index[lows[best]] high = pmf.index[highs[best]] return pd.Series([low, high], index=[f&#39;Low_{p*100:.0f}&#39;, f&#39;High_{p*100:.0f}&#39;]) hdi = highest_density_interval(posteriors, debug=True) hdi.tail() . Low_90 High_90 . Day . 1 3.89 | 7.55 | . 2 2.96 | 5.33 | . 3 3.42 | 5.12 | . Finally, we can plot both the most likely values for $R_t$ and the HDIs over time. This is the most useful representation as it shows how our beliefs change with every day. . ax = most_likely_values.plot(marker=&#39;o&#39;, label=&#39;Most Likely&#39;, title=f&#39;$R_t$ by day&#39;, c=&#39;k&#39;, markersize=4) ax.fill_between(hdi.index, hdi[&#39;Low_90&#39;], hdi[&#39;High_90&#39;], color=&#39;k&#39;, alpha=.1, lw=0, label=&#39;HDI&#39;) ax.legend(); . We can see that the most likely value of $R_t$ changes with time and the highest-density interval narrows as we become more sure of the true value of $R_t$ over time. Note that since we only had four days of history, I did not apply the process to this sample. Next, however, we&#39;ll turn to a real-world application where this process is necessary. . Real-World Application to India Data . Setup . India state data uploaded from: https://raw.githubusercontent.com/covid19india/api/master/csv/latest/state_wise_daily.csv . dfi = pd.read_csv(&quot;http://api.covid19india.org/states_daily_csv/confirmed.csv&quot;) dfi.head() dfi.columns . Index([&#39;date&#39;, &#39;TT&#39;, &#39;AN&#39;, &#39;AP&#39;, &#39;AR&#39;, &#39;AS&#39;, &#39;BR&#39;, &#39;CH&#39;, &#39;CT&#39;, &#39;DATEYMD&#39;, &#39;DD&#39;, &#39;DL&#39;, &#39;DN&#39;, &#39;GA&#39;, &#39;GJ&#39;, &#39;HP&#39;, &#39;HR&#39;, &#39;JH&#39;, &#39;JK&#39;, &#39;KA&#39;, &#39;KL&#39;, &#39;LA&#39;, &#39;LD&#39;, &#39;MH&#39;, &#39;ML&#39;, &#39;MN&#39;, &#39;MP&#39;, &#39;MZ&#39;, &#39;NL&#39;, &#39;OR&#39;, &#39;PB&#39;, &#39;PY&#39;, &#39;RJ&#39;, &#39;SK&#39;, &#39;TG&#39;, &#39;TN&#39;, &#39;TR&#39;, &#39;UN&#39;, &#39;UP&#39;, &#39;UT&#39;, &#39;WB&#39;, &#39;Unnamed: 41&#39;], dtype=&#39;object&#39;) . dfi.head() . date TT AN AP AR AS BR CH CT DATEYMD ... RJ SK TG TN TR UN UP UT WB Unnamed: 41 . 0 14-Mar-20 | 81 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 2020-03-14 | ... | 3 | 0 | 1 | 1 | 0 | 0 | 12 | 0 | 0 | NaN | . 1 15-Mar-20 | 27 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 2020-03-15 | ... | 1 | 0 | 2 | 0 | 0 | 0 | 1 | 0 | 0 | NaN | . 2 16-Mar-20 | 15 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 2020-03-16 | ... | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 1 | 0 | NaN | . 3 17-Mar-20 | 11 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 2020-03-17 | ... | 0 | 0 | 1 | 0 | 0 | 0 | 2 | 0 | 1 | NaN | . 4 18-Mar-20 | 37 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 2020-03-18 | ... | 3 | 0 | 8 | 1 | 0 | 0 | 2 | 1 | 0 | NaN | . 5 rows × 42 columns . # Data preprocessing # Exclude states with 2 or less datapoints with 10 or less cases dfi = dfi.drop(columns=[&#39;DATEYMD&#39;, &#39;Unnamed: 41&#39;], axis=1) cols = dfi.columns[1:] dfi.loc[:, cols] = dfi.loc[:, cols].cumsum(axis=0) nstates = dfi.columns[1:].tolist() dfa = pd.DataFrame() for i, state in enumerate(nstates): dfc = dfi[[&#39;date&#39;, state]].copy() dfc[&#39;state&#39;] = state dfc = dfc.rename({state: &#39;cases&#39;}, axis=1) dfc[&#39;date&#39;] = pd.to_datetime(dfc[&#39;date&#39;]) # dfc = dfc[dfc.cases &gt; 5].copy() dfa = dfa.append(dfc) #if (len(dfc) &gt; 2): # dfa = dfa.append(dfc) #else: # print(f&quot;Excluding state {state}&quot;) dfa[&#39;date&#39;] = pd.to_datetime(dfa[&#39;date&#39;]) states = dfa.set_index([&#39;state&#39;, &#39;date&#39;]).squeeze() states . state date TT 2020-03-14 81 2020-03-15 108 2020-03-16 123 2020-03-17 134 2020-03-18 171 ... WB 2021-08-12 1536446 2021-08-13 1537185 2021-08-14 1537890 2021-08-15 1538563 2021-08-16 1539065 Name: cases, Length: 20319, dtype: int64 . Taking a look at the state, we need to start the analysis when there are a consistent number of cases each day. Find the last zero new case day and start on the day after that. . Also, case reporting is very erratic based on testing backlogs, etc. To get the best view of the &#39;true&#39; data we can, I&#39;ve applied a gaussian filter to the time series. This is obviously an arbitrary choice, but you&#39;d imagine the real world process is not nearly as stochastic as the actual reporting. . Running the Algorithm . Choosing the Gaussian $ sigma$ for $P(R_t|R_{t-1})$ . . Note: you can safely skip this section if you trust that we chose the right value of $ sigma$ for the process below. Otherwise, read on. The original approach simply selects yesterday&#39;s posterior as today&#39;s prior. While intuitive, doing so doesn&#39;t allow for our belief that the value of $R_t$ has likely changed from yesterday. To allow for that change, we apply Gaussian noise to the prior distribution with some standard deviation $ sigma$. The higher $ sigma$ the more noise and the more we will expect the value of $R_t$ to drift each day. Interestingly, applying noise on noise iteratively means that there will be a natural decay of distant posteriors. This approach has a similar effect of windowing, but is more robust and doesn&#39;t arbitrarily forget posteriors after a certain time like my previous approach. Specifically, windowing computed a fixed $R_t$ at each time $t$ that explained the surrounding $w$ days of cases, while the new approach computes a series of $R_t$ values that explains all the cases, assuming that $R_t$ fluctuates by about $ sigma$ each day. . However, there&#39;s still an arbitrary choice: what should $ sigma$ be? Adam Lerer pointed out that we can use the process of maximum likelihood to inform our choice. Here&#39;s how it works: . Maximum likelihood says that we&#39;d like to choose a $ sigma$ that maximizes the likelihood of seeing our data $k$: $P(k| sigma)$. Since $ sigma$ is a fixed value, let&#39;s leave it out of the notation, so we&#39;re trying to maximize $P(k)$ over all choices of $ sigma$. . Since $P(k)=P(k_0,k_1, ldots,k_t)=P(k_0)P(k_1) ldots P(k_t)$ we need to define $P(k_t)$. It turns out this is the denominator of Bayes rule: . $$P(R_t|k_t) = frac{P(k_t|R_t)P(R_t)}{P(k_t)}$$ . To calculate it, we notice that the numerator is actually just the joint distribution of $k$ and $R$: . $$ P(k_t,R_t) = P(k_t|R_t)P(R_t) $$ . We can marginalize the distribution over $R_t$ to get $P(k_t)$: . $$ P(k_t) = sum_{R_{t}}{P(k_t|R_t)P(R_t)} $$ . So, if we sum the distribution of the numerator over all values of $R_t$, we get $P(k_t)$. And since we&#39;re calculating that anyway as we&#39;re calculating the posterior, we&#39;ll just keep track of it separately. . Since we&#39;re looking for the value of $ sigma$ that maximizes $P(k)$ overall, we actually want to maximize: . $$ prod_{t,i}{p(k_{ti})}$$ . where $t$ are all times and $i$ is each state. . Since we&#39;re multiplying lots of tiny probabilities together, it can be easier (and less error-prone) to take the $ log$ of the values and add them together. Remember that $ log{ab}= log{a}+ log{b}$. And since logarithms are monotonically increasing, maximizing the sum of the $ log$ of the probabilities is the same as maximizing the product of the non-logarithmic probabilities for any choice of $ sigma$. . Function for Calculating the Posteriors . To calculate the posteriors we follow these steps: . Calculate $ lambda$ - the expected arrival rate for every day&#39;s poisson process | Calculate each day&#39;s likelihood distribution over all possible values of $R_t$ | Calculate the process matrix based on the value of $ sigma$ we discussed above | Calculate our initial prior because our first day does not have a previous day from which to take the posterior Based on info from the cdc we will choose a Gamma with mean 7. | . | Loop from day 1 to the end, doing the following: Calculate the prior by applying the Gaussian to yesterday&#39;s prior. | Apply Bayes&#39; rule by multiplying this prior and the likelihood we calculated in step 2. | Divide by the probability of the data (also Bayes&#39; rule) | . | def prepare_cases(cases, cutoff=25): new_cases = cases.diff() smoothed = new_cases.rolling(7, win_type=&#39;gaussian&#39;, min_periods=1, center=True).mean(std=2).round() idx_start = np.searchsorted(smoothed, cutoff) smoothed = smoothed.iloc[idx_start:] original = new_cases.loc[smoothed.index] return original, smoothed . def get_posteriors(sr, sigma=0.15): # (1) Calculate Lambda lam = sr[:-1].values * np.exp(GAMMA * (r_t_range[:, None] - 1)) # (2) Calculate each day&#39;s likelihood likelihoods = pd.DataFrame( data = sps.poisson.pmf(sr[1:].values, lam), index = r_t_range, columns = sr.index[1:]) # (3) Create the Gaussian Matrix process_matrix = sps.norm(loc=r_t_range, scale=sigma ).pdf(r_t_range[:, None]) # (3a) Normalize all rows to sum to 1 process_matrix /= process_matrix.sum(axis=0) # (4) Calculate the initial prior #prior0 = sps.gamma(a=4).pdf(r_t_range) prior0 = np.ones_like(r_t_range)/len(r_t_range) prior0 /= prior0.sum() # Create a DataFrame that will hold our posteriors for each day # Insert our prior as the first posterior. posteriors = pd.DataFrame( index=r_t_range, columns=sr.index, data={sr.index[0]: prior0} ) # We said we&#39;d keep track of the sum of the log of the probability # of the data for maximum likelihood calculation. log_likelihood = 0.0 # (5) Iteratively apply Bayes&#39; rule for previous_day, current_day in zip(sr.index[:-1], sr.index[1:]): #(5a) Calculate the new prior current_prior = process_matrix @ posteriors[previous_day] #(5b) Calculate the numerator of Bayes&#39; Rule: P(k|R_t)P(R_t) numerator = likelihoods[current_day] * current_prior #(5c) Calcluate the denominator of Bayes&#39; Rule P(k) denominator = np.sum(numerator) # Execute full Bayes&#39; Rule posteriors[current_day] = numerator/denominator # Add to the running sum of log likelihoods log_likelihood += np.log(denominator) return posteriors, log_likelihood . Choosing the optimal $ sigma$ . In the previous section we described choosing an optimal $ sigma$, but we just assumed a value. But now that we can evaluate each state with any sigma, we have the tools for choosing the optimal $ sigma$. . Above we said we&#39;d choose the value of $ sigma$ that maximizes the likelihood of the data $P(k)$. Since we don&#39;t want to overfit on any one state, we choose the sigma that maximizes $P(k)$ over every state. To do this, we add up all the log likelihoods per state for each value of sigma then choose the maximum. . Note: this takes a while! . sigmas = np.linspace(1/20, 1, 20) targets = ~states.index.get_level_values(&#39;state&#39;).isin(FILTERED_REGION_CODES) states_to_process = states.loc[targets] results = {} failed_states = [] for state_name, cases in states_to_process.groupby(level=&#39;state&#39;): print(state_name) # Only difference with KS code new, smoothed = prepare_cases(cases, cutoff=1) # KS uses cutoff of 25 followed by 10 #new, smoothed = prepare_cases(cases, cutoff=25) #if len(smoothed) == 0: # new, smoothed = prepare_cases(cases, cutoff=10) result = {} # Holds all posteriors with every given value of sigma result[&#39;posteriors&#39;] = [] # Holds the log likelihood across all k for each value of sigma result[&#39;log_likelihoods&#39;] = [] try: for sigma in sigmas: posteriors, log_likelihood = get_posteriors(smoothed, sigma=sigma) result[&#39;posteriors&#39;].append(posteriors) result[&#39;log_likelihoods&#39;].append(log_likelihood) # Store all results keyed off of state name results[state_name] = result clear_output(wait=True) except: print(f&quot;Error for state {state_name}&quot;) failed_states.append(state_name) print(&#39;Done.&#39;) . Done. . print(f&quot;Failed for {len(failed_states)} states {failed_states}&quot;) . Failed for 2 states [&#39;DD&#39;, &#39;UN&#39;] . Now that we have all the log likelihoods, we can sum for each value of sigma across states, graph it, then choose the maximum. . # Each index of this array holds the total of the log likelihoods for # the corresponding index of the sigmas array. total_log_likelihoods = np.zeros_like(sigmas) # Loop through each state&#39;s results and add the log likelihoods to the running total. for state_name, result in results.items(): total_log_likelihoods += result[&#39;log_likelihoods&#39;] # Select the index with the largest log likelihood total max_likelihood_index = total_log_likelihoods.argmax() # Select the value that has the highest log likelihood sigma = sigmas[max_likelihood_index] # Plot it fig, ax = plt.subplots() ax.set_title(f&quot;Maximum Likelihood value for $ sigma$ = {sigma:.2f}&quot;); ax.plot(sigmas, total_log_likelihoods) ax.axvline(sigma, color=&#39;k&#39;, linestyle=&quot;:&quot;) . &lt;matplotlib.lines.Line2D at 0x7febf31bb438&gt; . Compile Final Results . Given that we&#39;ve selected the optimal $ sigma$, let&#39;s grab the precalculated posterior corresponding to that value of $ sigma$ for each state. Let&#39;s also calculate the 90% and 50% highest density intervals (this takes a little while) and also the most likely value. . final_results = None hdi_error_list = [] for state_name, result in results.items(): print(state_name) try: posteriors = result[&#39;posteriors&#39;][max_likelihood_index] hdis_90 = highest_density_interval(posteriors, p=.9) hdis_50 = highest_density_interval(posteriors, p=.5) most_likely = posteriors.idxmax().rename(&#39;ML&#39;) result = pd.concat([most_likely, hdis_90, hdis_50], axis=1) if final_results is None: final_results = result else: final_results = pd.concat([final_results, result]) clear_output(wait=True) except: print(f&#39;hdi failed for {state_name}&#39;) hdi_error_list.append(state_name) pass print(f&#39;HDI error list: {hdi_error_list}&#39;) print(&#39;Done.&#39;) . HDI error list: [&#39;AN&#39;, &#39;AR&#39;, &#39;AS&#39;, &#39;CH&#39;, &#39;CT&#39;, &#39;DL&#39;, &#39;DN&#39;, &#39;HP&#39;, &#39;MH&#39;, &#39;NL&#39;, &#39;RJ&#39;, &#39;TR&#39;, &#39;UT&#39;] Done. . Plot All India States . def plot_rt(result, ax, state_name): ax.set_title(f&quot;{state_name}&quot;) # Colors ABOVE = [1,0,0] MIDDLE = [1,1,1] BELOW = [0,0,0] cmap = ListedColormap(np.r_[ np.linspace(BELOW,MIDDLE,25), np.linspace(MIDDLE,ABOVE,25) ]) color_mapped = lambda y: np.clip(y, .5, 1.5)-.5 index = result[&#39;ML&#39;].index.get_level_values(&#39;date&#39;) values = result[&#39;ML&#39;].values # Plot dots and line ax.plot(index, values, c=&#39;k&#39;, zorder=1, alpha=.25) ax.scatter(index, values, s=40, lw=.5, c=cmap(color_mapped(values)), edgecolors=&#39;k&#39;, zorder=2) # Aesthetically, extrapolate credible interval by 1 day either side lowfn = interp1d(date2num(index), result[&#39;Low_90&#39;].values, bounds_error=False, fill_value=&#39;extrapolate&#39;) highfn = interp1d(date2num(index), result[&#39;High_90&#39;].values, bounds_error=False, fill_value=&#39;extrapolate&#39;) extended = pd.date_range(start=pd.Timestamp(&#39;2020-03-01&#39;), end=index[-1]+pd.Timedelta(days=1)) ax.fill_between(extended, lowfn(date2num(extended)), highfn(date2num(extended)), color=&#39;k&#39;, alpha=.1, lw=0, zorder=3) ax.axhline(1.0, c=&#39;k&#39;, lw=1, label=&#39;$R_t=1.0$&#39;, alpha=.25); # Formatting ax.xaxis.set_major_locator(mdates.MonthLocator()) ax.xaxis.set_major_formatter(mdates.DateFormatter(&#39;%b&#39;)) ax.xaxis.set_minor_locator(mdates.DayLocator()) ax.yaxis.set_major_locator(ticker.MultipleLocator(1)) ax.yaxis.set_major_formatter(ticker.StrMethodFormatter(&quot;{x:.1f}&quot;)) ax.yaxis.tick_right() ax.spines[&#39;left&#39;].set_visible(False) ax.spines[&#39;bottom&#39;].set_visible(False) ax.spines[&#39;right&#39;].set_visible(False) ax.margins(0) ax.grid(which=&#39;major&#39;, axis=&#39;y&#39;, c=&#39;k&#39;, alpha=.1, zorder=-2) ax.margins(0) ax.set_ylim(0.0, 5.0) ax.set_xlim(pd.Timestamp(&#39;2020-03-01&#39;), result.index.get_level_values(&#39;date&#39;)[-1]+pd.Timedelta(days=1)) fig.set_facecolor(&#39;w&#39;) . def plot_rt_new(result, ax, state_name): ax.set_title(f&quot;{state_name}&quot;) # Colors ABOVE = [1,0,0] MIDDLE = [1,1,1] BELOW = [0,0,0] cmap = ListedColormap(np.r_[ np.linspace(BELOW,MIDDLE,25), np.linspace(MIDDLE,ABOVE,25) ]) color_mapped = lambda y: np.clip(y, .5, 1.5)-.5 index = result[&#39;ML&#39;].index.get_level_values(&#39;date&#39;) values = result[&#39;ML&#39;].values # Plot dots and line ax.plot(index, values, c=&#39;k&#39;, zorder=1, alpha=.25) ax.scatter(index, values, s=40, lw=.5, c=cmap(color_mapped(values)), edgecolors=&#39;k&#39;, zorder=2) # Aesthetically, extrapolate credible interval by 1 day either side lowfn = interp1d(date2num(index), result[&#39;Low_90&#39;].values, bounds_error=False, fill_value=&#39;extrapolate&#39;) highfn = interp1d(date2num(index), result[&#39;High_90&#39;].values, bounds_error=False, fill_value=&#39;extrapolate&#39;) extended = pd.date_range(start=pd.Timestamp(&#39;2020-03-01&#39;), end=index[-1]+pd.Timedelta(days=1)) ax.fill_between(extended, lowfn(date2num(extended)), highfn(date2num(extended)), color=&#39;k&#39;, alpha=.1, lw=0, zorder=3) ax.axhline(1.0, c=&#39;k&#39;, lw=1, label=&#39;$R_t=1.0$&#39;, alpha=.25); ax.axvline(x=pd.Timestamp(&#39;2020-03-24&#39;), ls=&#39;--&#39;, c=&#39;k&#39;, alpha=.25) ax.axvline(x=pd.Timestamp(&#39;2020-04-14&#39;), ls=&#39;--&#39;, c=&#39;k&#39;, alpha=.25) ax.axvline(x=pd.Timestamp(&#39;2020-05-03&#39;), ls=&#39;--&#39;, c=&#39;k&#39;, alpha=.25) ax.text(pd.Timestamp(&#39;2020-03-22&#39;), 0.2, &#39;March 24&#39;, bbox=dict(facecolor=&#39;white&#39;, alpha=0.5)) ax.text(pd.Timestamp(&#39;2020-04-12&#39;), 0.2, &#39;April 14&#39;, bbox=dict(facecolor=&#39;white&#39;, alpha=0.5)) ax.text(pd.Timestamp(&#39;2020-05-02&#39;), 0.2, &#39;May 3&#39;, bbox=dict(facecolor=&#39;white&#39;, alpha=0.5)) result2 = result.reset_index() t1 = pd.Timestamp(&#39;2020-03-24&#39;) t2 = pd.Timestamp(&#39;2020-04-14&#39;) t3 = pd.Timestamp(&#39;2020-05-03&#39;) r1m = result2[result2.state==state_name][result2.date &lt;= t1][&#39;ML&#39;].mean() r1l = result2[result2.state==state_name][result2.date &lt;= t1][&#39;Low_90&#39;].mean() r1h = result2[result2.state==state_name][result2.date &lt;= t1][&#39;High_90&#39;].mean() text1 = f&quot;Pre-lockdown: n {r1m:.2f} [{r1l:.2f}-{r1h:.2f}]&quot; r2m = result2[result2.state==state_name][(result2.date &gt; t1) &amp; (result2.date &lt;= t2)][&#39;ML&#39;].mean() r2l = result2[result2.state==state_name][(result2.date &gt; t1) &amp; (result2.date &lt;= t2)][&#39;Low_90&#39;].mean() r2h = result2[result2.state==state_name][(result2.date &gt; t1) &amp; (result2.date &lt;= t2)][&#39;High_90&#39;].mean() text2 = f&quot;Initial Lockdown: n {r2m:.2f} [{r2l:.2f}-{r2h:.2f}]&quot; r3m = result2[result2.state==state_name][(result2.date &gt; t2) &amp; (result2.date &lt;= t3)][&#39;ML&#39;].mean() r3l = result2[result2.state==state_name][(result2.date &gt; t2) &amp; (result2.date &lt;= t3)][&#39;Low_90&#39;].mean() r3h = result2[result2.state==state_name][(result2.date &gt; t2) &amp; (result2.date &lt;= t3)][&#39;High_90&#39;].mean() text3 = f&quot;First Extension: n {r3m:.2f} [{r3l:.2f}-{r3h:.2f}]&quot; r4m = result2[result2.state==state_name][result2.date &gt; t3][&#39;ML&#39;].mean() r4l = result2[result2.state==state_name][result2.date &gt; t3][&#39;Low_90&#39;].mean() r4h = result2[result2.state==state_name][result2.date &gt; t3][&#39;High_90&#39;].mean() text4 = f&quot;Second Extension: n {r4m:.2f} [{r4l:.2f}-{r4h:.2f}]&quot; if r1m &gt; 0: ax.text(pd.Timestamp(&#39;2020-03-08&#39;), 3.5, text1, bbox=dict(facecolor=&#39;white&#39;, alpha=0.5)) if r2m &gt; 0: ax.text(pd.Timestamp(&#39;2020-03-30&#39;), 3.5, text2, bbox=dict(facecolor=&#39;white&#39;, alpha=0.5)) if r3m &gt; 0: ax.text(pd.Timestamp(&#39;2020-04-20&#39;), 3.5, text3, bbox=dict(facecolor=&#39;white&#39;, alpha=0.5)) if r4m &gt; 0: ax.text(pd.Timestamp(&#39;2020-05-04&#39;), 3.5, text4, bbox=dict(facecolor=&#39;white&#39;, alpha=0.5)) # Formatting ax.xaxis.set_major_locator(mdates.MonthLocator()) ax.xaxis.set_major_formatter(mdates.DateFormatter(&#39;%b&#39;)) ax.xaxis.set_minor_locator(mdates.DayLocator()) ax.yaxis.set_major_locator(ticker.MultipleLocator(1)) ax.yaxis.set_major_formatter(ticker.StrMethodFormatter(&quot;{x:.1f}&quot;)) ax.yaxis.tick_right() ax.spines[&#39;left&#39;].set_visible(False) ax.spines[&#39;bottom&#39;].set_visible(False) ax.spines[&#39;right&#39;].set_visible(False) ax.margins(0) ax.grid(which=&#39;major&#39;, axis=&#39;y&#39;, c=&#39;k&#39;, alpha=.1, zorder=-2) ax.margins(0) ax.set_ylim(0.0, 5.0) ax.set_xlim(pd.Timestamp(&#39;2020-03-01&#39;), result.index.get_level_values(&#39;date&#39;)[-1]+pd.Timedelta(days=1)) fig.set_facecolor(&#39;w&#39;) . def plot_rt_top6(final_results, ax, state_list): ax.set_title(f&quot;All India &amp; Top States&quot;) # Colors ABOVE = [1,0,0] MIDDLE = [1,1,1] BELOW = [0,0,0] cmap = ListedColormap(np.r_[ np.linspace(BELOW,MIDDLE,25), np.linspace(MIDDLE,ABOVE,25) ]) color_mapped = lambda y: np.clip(y, .5, 1.5)-.5 for i, (state_name, result) in enumerate(final_results.groupby(&#39;state&#39;)): if (state_name not in state_list): continue index = result[&#39;ML&#39;].index.get_level_values(&#39;date&#39;) values = result[&#39;ML&#39;].values # Plot dots and line ax.plot(index, values, c=&#39;k&#39;, zorder=1, alpha=.25) ax.scatter(index, values, s=40, lw=.5, label=state_name) ax.legend() ax.axhline(1.0, c=&#39;k&#39;, lw=1, label=&#39;$R_t=1.0$&#39;, alpha=.25); ax.axvline(x=pd.Timestamp(&#39;2020-03-24&#39;), ls=&#39;--&#39;, c=&#39;k&#39;, alpha=.25) ax.axvline(x=pd.Timestamp(&#39;2020-04-14&#39;), ls=&#39;--&#39;, c=&#39;k&#39;, alpha=.25) ax.axvline(x=pd.Timestamp(&#39;2020-05-03&#39;), ls=&#39;--&#39;, c=&#39;k&#39;, alpha=.25) ax.text(pd.Timestamp(&#39;2020-03-22&#39;), 0.2, &#39;March 24&#39;, bbox=dict(facecolor=&#39;white&#39;, alpha=0.5)) ax.text(pd.Timestamp(&#39;2020-04-12&#39;), 0.2, &#39;April 14&#39;, bbox=dict(facecolor=&#39;white&#39;, alpha=0.5)) ax.text(pd.Timestamp(&#39;2020-05-02&#39;), 0.2, &#39;May 3&#39;, bbox=dict(facecolor=&#39;white&#39;, alpha=0.5)) result2 = result.reset_index() text1 = f&quot;Pre-lockdown:&quot; text2 = f&quot;Initial Lockdown:&quot; text3 = f&quot;First Extension:&quot; text4 = f&quot;Second Extension:&quot; ax.text(pd.Timestamp(&#39;2020-03-08&#39;), 3.5, text1, bbox=dict(facecolor=&#39;white&#39;, alpha=0.5)) ax.text(pd.Timestamp(&#39;2020-03-30&#39;), 3.5, text2, bbox=dict(facecolor=&#39;white&#39;, alpha=0.5)) ax.text(pd.Timestamp(&#39;2020-04-20&#39;), 3.5, text3, bbox=dict(facecolor=&#39;white&#39;, alpha=0.5)) ax.text(pd.Timestamp(&#39;2020-05-04&#39;), 3.5, text4, bbox=dict(facecolor=&#39;white&#39;, alpha=0.5)) # Formatting ax.xaxis.set_major_locator(mdates.MonthLocator()) ax.xaxis.set_major_formatter(mdates.DateFormatter(&#39;%b&#39;)) ax.xaxis.set_minor_locator(mdates.DayLocator()) ax.yaxis.set_major_locator(ticker.MultipleLocator(1)) ax.yaxis.set_major_formatter(ticker.StrMethodFormatter(&quot;{x:.1f}&quot;)) ax.yaxis.tick_right() ax.spines[&#39;left&#39;].set_visible(False) ax.spines[&#39;bottom&#39;].set_visible(False) ax.spines[&#39;right&#39;].set_visible(False) ax.margins(0) ax.grid(which=&#39;major&#39;, axis=&#39;y&#39;, c=&#39;k&#39;, alpha=.1, zorder=-2) ax.margins(0) ax.set_ylim(0.0, 5.0) ax.set_xlim(pd.Timestamp(&#39;2020-03-01&#39;), result.index.get_level_values(&#39;date&#39;)[-1]+pd.Timedelta(days=1)) fig.set_facecolor(&#39;w&#39;) . #state_list = [&#39;MH&#39;, &#39;RJ&#39;, &#39;TN&#39;, &#39;TT&#39;, &#39;DL&#39;, &#39;KL&#39;, &#39;GJ&#39;, &#39;PB&#39;] state_list = [&#39;MH&#39;, &#39;TN&#39;, &#39;TT&#39;, &#39;GJ&#39;, &#39;KL&#39;] fig, ax = plt.subplots(figsize=(1200/72,800/72)) plot_rt_top6(final_results, ax, state_list) . ncols = 1 nrows = 1 plt.rcParams.update({&#39;figure.max_open_warning&#39;: 0}) for i, (state_name, result) in enumerate(final_results.groupby(&#39;state&#39;)): if i == 0: continue fig, ax = plt.subplots(figsize=(900/72,600/72)) plot_rt_new(result, ax, state_name) . ncols = 4 nrows = int(np.ceil(len(results) / ncols)) fig, axes = plt.subplots(nrows=nrows, ncols=ncols, figsize=(15, nrows*3)) for i, (state_name, result) in enumerate(final_results.groupby(&#39;state&#39;)): plot_rt(result, axes.flat[i], state_name) fig.tight_layout() fig.set_facecolor(&#39;w&#39;) . Export Data to CSV . # Uncomment the following line if you&#39;d like to export the data final_results.to_csv(&#39;data/rt_india_state.csv&#39;) . tmpdf = final_results.reset_index() tmpdf[tmpdf.date == &#39;2020-05-13&#39;].sort_values(by=&#39;ML&#39;, ascending=True).shape . (18, 7) . Standings . # As of 4/12 no_lockdown = [ ] partial_lockdown = [ ] FULL_COLOR = [.7,.7,.7] NONE_COLOR = [179/255,35/255,14/255] PARTIAL_COLOR = [.5,.5,.5] ERROR_BAR_COLOR = [.3,.3,.3] . final_results . ML Low_90 High_90 Low_50 High_50 . state date . AP 2020-03-18 0.00 | 0.00 | 10.81 | 0.00 | 6.01 | . 2020-03-19 0.07 | 0.00 | 8.73 | 0.00 | 4.03 | . 2020-03-20 0.09 | 0.00 | 7.10 | 0.00 | 3.20 | . 2020-03-21 0.10 | 0.00 | 6.15 | 0.00 | 2.77 | . 2020-03-22 0.10 | 0.00 | 5.53 | 0.02 | 2.51 | . ... ... ... | ... | ... | ... | ... | . WB 2021-08-12 0.99 | 0.78 | 1.15 | 0.90 | 1.05 | . 2021-08-13 0.99 | 0.78 | 1.15 | 0.90 | 1.05 | . 2021-08-14 0.97 | 0.76 | 1.13 | 0.88 | 1.03 | . 2021-08-15 0.93 | 0.72 | 1.09 | 0.84 | 0.99 | . 2021-08-16 0.89 | 0.68 | 1.05 | 0.81 | 0.96 | . 11616 rows × 5 columns . filtered = final_results.index.get_level_values(0).isin(FILTERED_REGIONS) mr = final_results.loc[~filtered].groupby(level=0)[[&#39;ML&#39;, &#39;High_90&#39;, &#39;Low_90&#39;]].last() def plot_standings(mr, figsize=None, title=&#39;Most Recent $R_t$ by State&#39;): if not figsize: figsize = ((15.9/50)*len(mr)+.1,2.5) fig, ax = plt.subplots(figsize=figsize) ax.set_title(title) err = mr[[&#39;Low_90&#39;, &#39;High_90&#39;]].sub(mr[&#39;ML&#39;], axis=0).abs() bars = ax.bar(mr.index, mr[&#39;ML&#39;], width=.825, color=FULL_COLOR, ecolor=ERROR_BAR_COLOR, capsize=2, error_kw={&#39;alpha&#39;:.5, &#39;lw&#39;:1}, yerr=err.values.T) for bar, state_name in zip(bars, mr.index): if state_name in no_lockdown: bar.set_color(NONE_COLOR) if state_name in partial_lockdown: bar.set_color(PARTIAL_COLOR) labels = mr.index.to_series().replace({&#39;District of Columbia&#39;:&#39;DC&#39;}) ax.set_xticklabels(labels, rotation=90, fontsize=11) ax.margins(0) ax.set_ylim(0,2.) ax.axhline(1.0, linestyle=&#39;:&#39;, color=&#39;k&#39;, lw=1) leg = ax.legend(handles=[ Patch(label=&#39;Full&#39;, color=FULL_COLOR), Patch(label=&#39;Partial&#39;, color=PARTIAL_COLOR), Patch(label=&#39;None&#39;, color=NONE_COLOR) ], title=&#39;Lockdown&#39;, ncol=3, loc=&#39;upper left&#39;, columnspacing=.75, handletextpad=.5, handlelength=1) leg._legend_box.align = &quot;left&quot; fig.set_facecolor(&#39;w&#39;) return fig, ax mr.sort_values(&#39;ML&#39;, inplace=True) plot_standings(mr); . /opt/hostedtoolcache/Python/3.6.15/x64/lib/python3.6/site-packages/ipykernel_launcher.py:28: UserWarning: FixedFormatter should only be used together with FixedLocator findfont: Font family [&#39;sans-serif&#39;] not found. Falling back to DejaVu Sans. . mr.sort_values(&#39;High_90&#39;, inplace=True) plot_standings(mr); . /opt/hostedtoolcache/Python/3.6.15/x64/lib/python3.6/site-packages/ipykernel_launcher.py:28: UserWarning: FixedFormatter should only be used together with FixedLocator . show = mr[mr.High_90.le(1)].sort_values(&#39;ML&#39;) fig, ax = plot_standings(show, title=&#39;Likely Under Control&#39;); . /opt/hostedtoolcache/Python/3.6.15/x64/lib/python3.6/site-packages/ipykernel_launcher.py:28: UserWarning: FixedFormatter should only be used together with FixedLocator . show = mr[mr.Low_90.ge(1.0)].sort_values(&#39;Low_90&#39;) fig, ax = plot_standings(show, title=&#39;Likely Not Under Control&#39;); ax.get_legend().remove() .",
            "url": "https://sanzgiri.github.io/covid-19-dashboards/2022/11/10/Realtime_R0_India_By_State_Upd.html",
            "relUrl": "/2022/11/10/Realtime_R0_India_By_State_Upd.html",
            "date": " • Nov 10, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Realtime R_0 for India by State",
            "content": "An Exception was encountered at &#39;In [12]&#39;. . from IPython.core.display import display, HTML display(HTML(&quot;&lt;style&gt;.container { width:100% !important; }&lt;/style&gt;&quot;)) . Estimating COVID-19&#39;s $R_t$ in Real-Time . Kevin Systrom - April 17 . In any epidemic, $R_t$ is the measure known as the effective reproduction number. It&#39;s the number of people who become infected per infectious person at time $t$. The most well-known version of this number is the basic reproduction number: $R_0$ when $t=0$. However, $R_0$ is a single measure that does not adapt with changes in behavior and restrictions. . As a pandemic evolves, increasing restrictions (or potential releasing of restrictions) changes $R_t$. Knowing the current $R_t$ is essential. When $R gg1$, the pandemic will spread through a large part of the population. If $R_t&lt;1$, the pandemic will slow quickly before it has a chance to infect many people. The lower the $R_t$: the more manageable the situation. In general, any $R_t&lt;1$ means things are under control. . The value of $R_t$ helps us in two ways. (1) It helps us understand how effective our measures have been controlling an outbreak and (2) it gives us vital information about whether we should increase or reduce restrictions based on our competing goals of economic prosperity and human safety. Well-respected epidemiologists argue that tracking $R_t$ is the only way to manage through this crisis. . Yet, today, we don&#39;t yet use $R_t$ in this way. In fact, the only real-time measure I&#39;ve seen has been for Hong Kong. More importantly, it is not useful to understand $R_t$ at a national level. Instead, to manage this crisis effectively, we need a local (state, county and/or city) granularity of $R_t$. . What follows is a solution to this problem at the US State level. It&#39;s a modified version of a solution created by Bettencourt &amp; Ribeiro 2008 to estimate real-time $R_t$ using a Bayesian approach. While this paper estimates a static $R$ value, here we introduce a process model with Gaussian noise to estimate a time-varying $R_t$. . If you have questions, comments, or improvments feel free to get in touch: hello@systrom.com. And if it&#39;s not entirely clear, I&#39;m not an epidemiologist. At the same time, data is data, and statistics are statistics and this is based on work by well-known epidemiologists so you can calibrate your beliefs as you wish. In the meantime, I hope you can learn something new as I did by reading through this example. Feel free to take this work and apply it elsewhere – internationally or to counties in the United States. . Additionally, a huge thanks to Frank Dellaert who suggested the addition of the process and to Adam Lerer who implemented the changes. Not only did I learn something new, it made the model much more responsive. . import pandas as pd import numpy as np from matplotlib import pyplot as plt from matplotlib.dates import date2num, num2date from matplotlib import dates as mdates from matplotlib import ticker from matplotlib.colors import ListedColormap from matplotlib.patches import Patch from scipy import stats as sps from scipy.interpolate import interp1d from IPython.display import clear_output FILTERED_REGIONS = [] FILTERED_REGION_CODES = [] %config InlineBackend.figure_format = &#39;retina&#39; . Bettencourt &amp; Ribeiro&#39;s Approach . Every day, we learn how many more people have COVID-19. This new case count gives us a clue about the current value of $R_t$. We also, figure that the value of $R_t$ today is related to the value of $R_{t-1}$ (yesterday&#39;s value) and every previous value of $R_{t-m}$ for that matter. . With these insights, the authors use Bayes&#39; rule to update their beliefs about the true value of $R_t$ based on how many new cases have been reported each day. . This is Bayes&#39; Theorem as we&#39;ll use it: . $$ P(R_t|k)= frac{P(k|R_t) cdot P(R_t)}{P(k)} $$ . This says that, having seen $k$ new cases, we believe the distribution of $R_t$ is equal to: . The likelihood of seeing $k$ new cases given $R_t$ times ... | The prior beliefs of the value of $P(R_t)$ without the data ... | divided by the probability of seeing this many cases in general. | . This is for a single day. To make it iterative: every day that passes, we use yesterday&#39;s prior $P(R_{t-1})$ to estimate today&#39;s prior $P(R_t)$. We will assume the distribution of $R_t$ to be a Gaussian centered around $R_{t-1}$, so $P(R_t|R_{t-1})= mathcal{N}(R_{t-1}, sigma)$, where $ sigma$ is a hyperparameter (see below on how we estimate $ sigma$). So on day one: . $$ P(R_1|k_1) propto P(R_1) cdot mathcal{L}(R_1|k_1)$$ . On day two: . $$ P(R_2|k_1,k_2) propto P(R_2) cdot mathcal{L}(R_2|k_2) = sum_{R_1} {P(R_1|k_1) cdot P(R_2|R_1) cdot mathcal{L}(R_2|k_2) }$$ . etc. . Choosing a Likelihood Function $P left(k_t|R_t right)$ . A likelihood function function says how likely we are to see $k$ new cases, given a value of $R_t$. . Any time you need to model &#39;arrivals&#39; over some time period of time, statisticians like to use the Poisson Distribution. Given an average arrival rate of $ lambda$ new cases per day, the probability of seeing $k$ new cases is distributed according to the Poisson distribution: . $$P(k| lambda) = frac{ lambda^k e^{- lambda}}{k!}$$ . # Column vector of k k = np.arange(0, 70)[:, None] # Different values of Lambda lambdas = [10, 20, 30, 40] # Evaluated the Probability Mass Function (remember: poisson is discrete) y = sps.poisson.pmf(k, lambdas) # Show the resulting shape print(y.shape) . (70, 4) . Note:this was a terse expression which makes it tricky. All I did was to make $k$ a column. By giving it a column for $k$ and a &#39;row&#39; for lambda it will evaluate the pmf over both and produce an array that has $k$ rows and lambda columns. This is an efficient way of producing many distributions all at once, and you will see it used again below! . fig, ax = plt.subplots() ax.set(title=&#39;Poisson Distribution of Cases n $p(k| lambda)$&#39;) plt.plot(k, y, marker=&#39;o&#39;, markersize=3, lw=0) plt.legend(title=&quot;$ lambda$&quot;, labels=lambdas); . findfont: Font family [&#39;sans-serif&#39;] not found. Falling back to DejaVu Sans. findfont: Font family [&#39;sans-serif&#39;] not found. Falling back to DejaVu Sans. . The Poisson distribution says that if you think you&#39;re going to have $ lambda$ cases per day, you&#39;ll probably get that many, plus or minus some variation based on chance. . But in our case, we know there have been $k$ cases and we need to know what value of $ lambda$ is most likely. In order to do this, we fix $k$ in place while varying $ lambda$. This is called the likelihood function. . For example, imagine we observe $k=20$ new cases, and we want to know how likely each $ lambda$ is: . k = 20 lam = np.linspace(1, 45, 90) likelihood = pd.Series(data=sps.poisson.pmf(k, lam), index=pd.Index(lam, name=&#39;$ lambda$&#39;), name=&#39;lambda&#39;) likelihood.plot(title=r&#39;Likelihood $P left(k_t=20| lambda right)$&#39;); . findfont: Font family [&#39;sans-serif&#39;] not found. Falling back to DejaVu Sans. . This says that if we see 20 cases, the most likely value of $ lambda$ is (not surprisingly) 20. But we&#39;re not certain: it&#39;s possible lambda was 21 or 17 and saw 20 new cases by chance alone. It also says that it&#39;s unlikely $ lambda$ was 40 and we saw 20. . Great. We have $P left( lambda_t|k_t right)$ which is parameterized by $ lambda$ but we were looking for $P left(k_t|R_t right)$ which is parameterized by $R_t$. We need to know the relationship between $ lambda$ and $R_t$ . Connecting $ lambda$ and $R_t$ . The key insight to making this work is to realize there&#39;s a connection between $R_t$ and $ lambda$. The derivation is beyond the scope of this notebook, but here it is: . $$ lambda = k_{t-1}e^{ gamma(R_t-1)}$$ . where $ gamma$ is the reciprocal of the serial interval (about 7 days for COVID19). Since we know every new case count on the previous day, we can now reformulate the likelihood function as a Poisson parameterized by fixing $k$ and varying $R_t$. . $$ lambda = k_{t-1}e^{ gamma(R_t-1)}$$ . $$P left(k|R_t right) = frac{ lambda^k e^{- lambda}}{k!}$$ . Evaluating the Likelihood Function . To continue our example, let&#39;s imagine a sample of new case counts $k$. What is the likelihood of different values of $R_t$ on each of those days? . k = np.array([20, 40, 55, 90]) # We create an array for every possible value of Rt R_T_MAX = 12 r_t_range = np.linspace(0, R_T_MAX, R_T_MAX*100+1) # Gamma is 1/serial interval # https://wwwnc.cdc.gov/eid/article/26/7/20-0282_article # https://www.nejm.org/doi/full/10.1056/NEJMoa2001316 GAMMA = 1/4 # Map Rt into lambda so we can substitute it into the equation below # Note that we have N-1 lambdas because on the first day of an outbreak # you do not know what to expect. lam = k[:-1] * np.exp(GAMMA * (r_t_range[:, None] - 1)) # Evaluate the likelihood on each day and normalize sum of each day to 1.0 likelihood_r_t = sps.poisson.pmf(k[1:], lam) likelihood_r_t /= np.sum(likelihood_r_t, axis=0) # Plot it ax = pd.DataFrame( data = likelihood_r_t, index = r_t_range ).plot( title=&#39;Likelihood of $R_t$ given $k$&#39;, xlim=(0,10) ) ax.legend(labels=k[1:], title=&#39;New Cases&#39;) ax.set_xlabel(&#39;$R_t$&#39;); . You can see that each day we have a independent guesses for $R_t$. The goal is to combine the information we have about previous days with the current day. To do this, we use Bayes&#39; theorem. . Performing the Bayesian Update . To perform the Bayesian update, we need to multiply the likelihood by the prior (which is just the previous day&#39;s likelihood without our Gaussian update) to get the posteriors. Let&#39;s do that using the cumulative product of each successive day: . posteriors = likelihood_r_t.cumprod(axis=1) posteriors = posteriors / np.sum(posteriors, axis=0) columns = pd.Index(range(1, posteriors.shape[1]+1), name=&#39;Day&#39;) posteriors = pd.DataFrame( data = posteriors, index = r_t_range, columns = columns) ax = posteriors.plot( title=&#39;Posterior $P(R_t|k)$&#39;, xlim=(0,10) ) ax.legend(title=&#39;Day&#39;) ax.set_xlabel(&#39;$R_t$&#39;); . Notice how on Day 1, our posterior matches Day 1&#39;s likelihood from above? That&#39;s because we have no information other than that day. However, when we update the prior using Day 2&#39;s information, you can see the curve has moved left, but not nearly as left as the likelihood for Day 2 from above. This is because Bayesian updating uses information from both days and effectively averages the two. Since Day 3&#39;s likelihood is in between the other two, you see a small shift to the right, but more importantly: a narrower distribution. We&#39;re becoming more confident in our believes of the true value of $R_t$. . From these posteriors, we can answer important questions such as &quot;What is the most likely value of $R_t$ each day?&quot; . most_likely_values = posteriors.idxmax(axis=0) most_likely_values . Day 1 3.77 2 2.84 3 2.90 dtype: float64 . We can also obtain the highest density intervals for $R_t$: . def highest_density_interval(pmf, p=.9): # If we pass a DataFrame, just call this recursively on the columns if(isinstance(pmf, pd.DataFrame)): return pd.DataFrame([highest_density_interval(pmf[col], p=p) for col in pmf], index=pmf.columns) cumsum = np.cumsum(pmf.values) best = None for i, value in enumerate(cumsum): for j, high_value in enumerate(cumsum[i+1:]): if (high_value-value &gt; p) and (not best or j&lt;best[1]-best[0]): best = (i, i+j+1) break low = pmf.index[best[0]] high = pmf.index[best[1]] return pd.Series([low, high], index=[f&#39;Low_{p*100:.0f}&#39;, f&#39;High_{p*100:.0f}&#39;]) hdi = highest_density_interval(posteriors) hdi.tail() . Low_90 High_90 . Day . 1 2.69 | 4.78 | . 2 2.17 | 3.53 | . 3 2.41 | 3.38 | . Finally, we can plot both the most likely values for $R_t$ and the HDIs over time. This is the most useful representation as it shows how our beliefs change with every day. . ax = most_likely_values.plot(marker=&#39;o&#39;, label=&#39;Most Likely&#39;, title=f&#39;$R_t$ by day&#39;, c=&#39;k&#39;, markersize=4) ax.fill_between(hdi.index, hdi[&#39;Low_90&#39;], hdi[&#39;High_90&#39;], color=&#39;k&#39;, alpha=.1, lw=0, label=&#39;HDI&#39;) ax.legend(); . We can see that the most likely value of $R_t$ changes with time and the highest-density interval narrows as we become more sure of the true value of $R_t$ over time. Note that since we only had four days of history, I did not apply the process to this sample. Next, however, we&#39;ll turn to a real-world application where this process is necessary. . Real-World Application to India Data . Setup . India state data uploaded from: https://raw.githubusercontent.com/covid19india/api/master/csv/latest/state_wise_daily.csv . dfi = pd.read_csv(&quot;http://api.covid19india.org/states_daily_csv/confirmed.csv&quot;) dfi.head() dfi.columns . Index([&#39;date&#39;, &#39;TT&#39;, &#39;AN&#39;, &#39;AP&#39;, &#39;AR&#39;, &#39;AS&#39;, &#39;BR&#39;, &#39;CH&#39;, &#39;CT&#39;, &#39;DATEYMD&#39;, &#39;DD&#39;, &#39;DL&#39;, &#39;DN&#39;, &#39;GA&#39;, &#39;GJ&#39;, &#39;HP&#39;, &#39;HR&#39;, &#39;JH&#39;, &#39;JK&#39;, &#39;KA&#39;, &#39;KL&#39;, &#39;LA&#39;, &#39;LD&#39;, &#39;MH&#39;, &#39;ML&#39;, &#39;MN&#39;, &#39;MP&#39;, &#39;MZ&#39;, &#39;NL&#39;, &#39;OR&#39;, &#39;PB&#39;, &#39;PY&#39;, &#39;RJ&#39;, &#39;SK&#39;, &#39;TG&#39;, &#39;TN&#39;, &#39;TR&#39;, &#39;UN&#39;, &#39;UP&#39;, &#39;UT&#39;, &#39;WB&#39;, &#39;Unnamed: 41&#39;], dtype=&#39;object&#39;) . Execution using papermill encountered an exception here and stopped: . # Data preprocessing # Exclude states with 2 or less datapoints with 10 or less cases dfi = dfi.drop(columns=[&#39;Unnamed: 40&#39;], axis=1) cols = dfi.columns[1:] dfi.loc[:, cols] = dfi.loc[:, cols].cumsum(axis=0) nstates = dfi.columns[1:].tolist() dfa = pd.DataFrame() for i, state in enumerate(nstates): dfc = dfi[[&#39;date&#39;, state]].copy() dfc[&#39;state&#39;] = state dfc = dfc.rename({state: &#39;cases&#39;}, axis=1) dfc[&#39;date&#39;] = pd.to_datetime(dfc[&#39;date&#39;]) # dfc = dfc[dfc.cases &gt; 5].copy() dfa = dfa.append(dfc) #if (len(dfc) &gt; 2): # dfa = dfa.append(dfc) #else: # print(f&quot;Excluding state {state}&quot;) dfa[&#39;date&#39;] = pd.to_datetime(dfa[&#39;date&#39;]) states = dfa.set_index([&#39;state&#39;, &#39;date&#39;]).squeeze() states . KeyError Traceback (most recent call last) &lt;ipython-input-12-dd1819595064&gt; in &lt;module&gt; 2 # Exclude states with 2 or less datapoints with 10 or less cases 3 -&gt; 4 dfi = dfi.drop(columns=[&#39;Unnamed: 40&#39;], axis=1) 5 cols = dfi.columns[1:] 6 dfi.loc[:, cols] = dfi.loc[:, cols].cumsum(axis=0) /opt/hostedtoolcache/Python/3.6.15/x64/lib/python3.6/site-packages/pandas/core/frame.py in drop(self, labels, axis, index, columns, level, inplace, errors) 4172 level=level, 4173 inplace=inplace, -&gt; 4174 errors=errors, 4175 ) 4176 /opt/hostedtoolcache/Python/3.6.15/x64/lib/python3.6/site-packages/pandas/core/generic.py in drop(self, labels, axis, index, columns, level, inplace, errors) 3887 for axis, labels in axes.items(): 3888 if labels is not None: -&gt; 3889 obj = obj._drop_axis(labels, axis, level=level, errors=errors) 3890 3891 if inplace: /opt/hostedtoolcache/Python/3.6.15/x64/lib/python3.6/site-packages/pandas/core/generic.py in _drop_axis(self, labels, axis, level, errors) 3921 new_axis = axis.drop(labels, level=level, errors=errors) 3922 else: -&gt; 3923 new_axis = axis.drop(labels, errors=errors) 3924 result = self.reindex(**{axis_name: new_axis}) 3925 /opt/hostedtoolcache/Python/3.6.15/x64/lib/python3.6/site-packages/pandas/core/indexes/base.py in drop(self, labels, errors) 5285 if mask.any(): 5286 if errors != &#34;ignore&#34;: -&gt; 5287 raise KeyError(f&#34;{labels[mask]} not found in axis&#34;) 5288 indexer = indexer[~mask] 5289 return self.delete(indexer) KeyError: &#34;[&#39;Unnamed: 40&#39;] not found in axis&#34; . Taking a look at the state, we need to start the analysis when there are a consistent number of cases each day. Find the last zero new case day and start on the day after that. . Also, case reporting is very erratic based on testing backlogs, etc. To get the best view of the &#39;true&#39; data we can, I&#39;ve applied a gaussian filter to the time series. This is obviously an arbitrary choice, but you&#39;d imagine the real world process is not nearly as stochastic as the actual reporting. . Running the Algorithm . Choosing the Gaussian $ sigma$ for $P(R_t|R_{t-1})$ . . Note: you can safely skip this section if you trust that we chose the right value of $ sigma$ for the process below. Otherwise, read on. The original approach simply selects yesterday&#39;s posterior as today&#39;s prior. While intuitive, doing so doesn&#39;t allow for our belief that the value of $R_t$ has likely changed from yesterday. To allow for that change, we apply Gaussian noise to the prior distribution with some standard deviation $ sigma$. The higher $ sigma$ the more noise and the more we will expect the value of $R_t$ to drift each day. Interestingly, applying noise on noise iteratively means that there will be a natural decay of distant posteriors. This approach has a similar effect of windowing, but is more robust and doesn&#39;t arbitrarily forget posteriors after a certain time like my previous approach. Specifically, windowing computed a fixed $R_t$ at each time $t$ that explained the surrounding $w$ days of cases, while the new approach computes a series of $R_t$ values that explains all the cases, assuming that $R_t$ fluctuates by about $ sigma$ each day. . However, there&#39;s still an arbitrary choice: what should $ sigma$ be? Adam Lerer pointed out that we can use the process of maximum likelihood to inform our choice. Here&#39;s how it works: . Maximum likelihood says that we&#39;d like to choose a $ sigma$ that maximizes the likelihood of seeing our data $k$: $P(k| sigma)$. Since $ sigma$ is a fixed value, let&#39;s leave it out of the notation, so we&#39;re trying to maximize $P(k)$ over all choices of $ sigma$. . Since $P(k)=P(k_0,k_1, ldots,k_t)=P(k_0)P(k_1) ldots P(k_t)$ we need to define $P(k_t)$. It turns out this is the denominator of Bayes rule: . $$P(R_t|k_t) = frac{P(k_t|R_t)P(R_t)}{P(k_t)}$$ . To calculate it, we notice that the numerator is actually just the joint distribution of $k$ and $R$: . $$ P(k_t,R_t) = P(k_t|R_t)P(R_t) $$ . We can marginalize the distribution over $R_t$ to get $P(k_t)$: . $$ P(k_t) = sum_{R_{t}}{P(k_t|R_t)P(R_t)} $$ . So, if we sum the distribution of the numerator over all values of $R_t$, we get $P(k_t)$. And since we&#39;re calculating that anyway as we&#39;re calculating the posterior, we&#39;ll just keep track of it separately. . Since we&#39;re looking for the value of $ sigma$ that maximizes $P(k)$ overall, we actually want to maximize: . $$ prod_{t,i}{p(k_{ti})}$$ . where $t$ are all times and $i$ is each state. . Since we&#39;re multiplying lots of tiny probabilities together, it can be easier (and less error-prone) to take the $ log$ of the values and add them together. Remember that $ log{ab}= log{a}+ log{b}$. And since logarithms are monotonically increasing, maximizing the sum of the $ log$ of the probabilities is the same as maximizing the product of the non-logarithmic probabilities for any choice of $ sigma$. . Function for Calculating the Posteriors . To calculate the posteriors we follow these steps: . Calculate $ lambda$ - the expected arrival rate for every day&#39;s poisson process | Calculate each day&#39;s likelihood distribution over all possible values of $R_t$ | Calculate the process matrix based on the value of $ sigma$ we discussed above | Calculate our initial prior because our first day does not have a previous day from which to take the posterior Based on info from the cdc we will choose a Gamma with mean 7. | . | Loop from day 1 to the end, doing the following: Calculate the prior by applying the Gaussian to yesterday&#39;s prior. | Apply Bayes&#39; rule by multiplying this prior and the likelihood we calculated in step 2. | Divide by the probability of the data (also Bayes&#39; rule) | . | def prepare_cases(cases, cutoff=1): new_cases = cases.diff() smoothed = new_cases.rolling(7, win_type=&#39;gaussian&#39;, min_periods=1, center=True).mean(std=3).round() idx_start = np.searchsorted(smoothed, cutoff) smoothed = smoothed.iloc[idx_start:] original = new_cases.loc[smoothed.index] return original, smoothed . def get_posteriors(sr, sigma=0.15): # (1) Calculate Lambda lam = sr[:-1].values * np.exp(GAMMA * (r_t_range[:, None] - 1)) # (2) Calculate each day&#39;s likelihood likelihoods = pd.DataFrame( data = sps.poisson.pmf(sr[1:].values, lam), index = r_t_range, columns = sr.index[1:]) # (3) Create the Gaussian Matrix process_matrix = sps.norm(loc=r_t_range, scale=sigma ).pdf(r_t_range[:, None]) # (3a) Normalize all rows to sum to 1 process_matrix /= process_matrix.sum(axis=0) # (4) Calculate the initial prior prior0 = sps.gamma(a=4).pdf(r_t_range) prior0 /= prior0.sum() # Create a DataFrame that will hold our posteriors for each day # Insert our prior as the first posterior. posteriors = pd.DataFrame( index=r_t_range, columns=sr.index, data={sr.index[0]: prior0} ) # We said we&#39;d keep track of the sum of the log of the probability # of the data for maximum likelihood calculation. log_likelihood = 0.0 # (5) Iteratively apply Bayes&#39; rule for previous_day, current_day in zip(sr.index[:-1], sr.index[1:]): #(5a) Calculate the new prior current_prior = process_matrix @ posteriors[previous_day] #(5b) Calculate the numerator of Bayes&#39; Rule: P(k|R_t)P(R_t) numerator = likelihoods[current_day] * current_prior #(5c) Calcluate the denominator of Bayes&#39; Rule P(k) denominator = np.sum(numerator) # Execute full Bayes&#39; Rule posteriors[current_day] = numerator/denominator # Add to the running sum of log likelihoods log_likelihood += np.log(denominator) return posteriors, log_likelihood . Choosing the optimal $ sigma$ . In the previous section we described choosing an optimal $ sigma$, but we just assumed a value. But now that we can evaluate each state with any sigma, we have the tools for choosing the optimal $ sigma$. . Above we said we&#39;d choose the value of $ sigma$ that maximizes the likelihood of the data $P(k)$. Since we don&#39;t want to overfit on any one state, we choose the sigma that maximizes $P(k)$ over every state. To do this, we add up all the log likelihoods per state for each value of sigma then choose the maximum. . Note: this takes a while! . sigmas = np.linspace(1/20, 1, 20) targets = ~states.index.get_level_values(&#39;state&#39;).isin(FILTERED_REGION_CODES) states_to_process = states.loc[targets] results = {} failed_states = [] for state_name, cases in states_to_process.groupby(level=&#39;state&#39;): print(state_name) new, smoothed = prepare_cases(cases) result = {} # Holds all posteriors with every given value of sigma result[&#39;posteriors&#39;] = [] # Holds the log likelihood across all k for each value of sigma result[&#39;log_likelihoods&#39;] = [] try: for sigma in sigmas: posteriors, log_likelihood = get_posteriors(smoothed, sigma=sigma) result[&#39;posteriors&#39;].append(posteriors) result[&#39;log_likelihoods&#39;].append(log_likelihood) # Store all results keyed off of state name results[state_name] = result clear_output(wait=True) except: print(f&quot;Error for state {state_name}&quot;) failed_states.append(state_name) print(&#39;Done.&#39;) . print(f&quot;Failed for {len(failed_states)} states {failed_states}&quot;) . Now that we have all the log likelihoods, we can sum for each value of sigma across states, graph it, then choose the maximum. . # Each index of this array holds the total of the log likelihoods for # the corresponding index of the sigmas array. total_log_likelihoods = np.zeros_like(sigmas) # Loop through each state&#39;s results and add the log likelihoods to the running total. for state_name, result in results.items(): total_log_likelihoods += result[&#39;log_likelihoods&#39;] # Select the index with the largest log likelihood total max_likelihood_index = total_log_likelihoods.argmax() # Select the value that has the highest log likelihood sigma = sigmas[max_likelihood_index] # Plot it fig, ax = plt.subplots() ax.set_title(f&quot;Maximum Likelihood value for $ sigma$ = {sigma:.2f}&quot;); ax.plot(sigmas, total_log_likelihoods) ax.axvline(sigma, color=&#39;k&#39;, linestyle=&quot;:&quot;) . Compile Final Results . Given that we&#39;ve selected the optimal $ sigma$, let&#39;s grab the precalculated posterior corresponding to that value of $ sigma$ for each state. Let&#39;s also calculate the 90% and 50% highest density intervals (this takes a little while) and also the most likely value. . final_results = None hdi_error_list = [] for state_name, result in results.items(): print(state_name) try: posteriors = result[&#39;posteriors&#39;][max_likelihood_index] hdis_90 = highest_density_interval(posteriors, p=.9) hdis_50 = highest_density_interval(posteriors, p=.5) most_likely = posteriors.idxmax().rename(&#39;ML&#39;) result = pd.concat([most_likely, hdis_90, hdis_50], axis=1) if final_results is None: final_results = result else: final_results = pd.concat([final_results, result]) clear_output(wait=True) except: print(f&#39;hdi failed for {state_name}&#39;) hdi_error_list.append(state_name) pass print(f&#39;HDI error list: {hdi_error_list}&#39;) print(&#39;Done.&#39;) . Plot All India States . def plot_rt(result, ax, state_name): ax.set_title(f&quot;{state_name}&quot;) # Colors ABOVE = [1,0,0] MIDDLE = [1,1,1] BELOW = [0,0,0] cmap = ListedColormap(np.r_[ np.linspace(BELOW,MIDDLE,25), np.linspace(MIDDLE,ABOVE,25) ]) color_mapped = lambda y: np.clip(y, .5, 1.5)-.5 index = result[&#39;ML&#39;].index.get_level_values(&#39;date&#39;) values = result[&#39;ML&#39;].values # Plot dots and line ax.plot(index, values, c=&#39;k&#39;, zorder=1, alpha=.25) ax.scatter(index, values, s=40, lw=.5, c=cmap(color_mapped(values)), edgecolors=&#39;k&#39;, zorder=2) # Aesthetically, extrapolate credible interval by 1 day either side lowfn = interp1d(date2num(index), result[&#39;Low_90&#39;].values, bounds_error=False, fill_value=&#39;extrapolate&#39;) highfn = interp1d(date2num(index), result[&#39;High_90&#39;].values, bounds_error=False, fill_value=&#39;extrapolate&#39;) extended = pd.date_range(start=pd.Timestamp(&#39;2020-03-01&#39;), end=index[-1]+pd.Timedelta(days=1)) ax.fill_between(extended, lowfn(date2num(extended)), highfn(date2num(extended)), color=&#39;k&#39;, alpha=.1, lw=0, zorder=3) ax.axhline(1.0, c=&#39;k&#39;, lw=1, label=&#39;$R_t=1.0$&#39;, alpha=.25); # Formatting ax.xaxis.set_major_locator(mdates.MonthLocator()) ax.xaxis.set_major_formatter(mdates.DateFormatter(&#39;%b&#39;)) ax.xaxis.set_minor_locator(mdates.DayLocator()) ax.yaxis.set_major_locator(ticker.MultipleLocator(1)) ax.yaxis.set_major_formatter(ticker.StrMethodFormatter(&quot;{x:.1f}&quot;)) ax.yaxis.tick_right() ax.spines[&#39;left&#39;].set_visible(False) ax.spines[&#39;bottom&#39;].set_visible(False) ax.spines[&#39;right&#39;].set_visible(False) ax.margins(0) ax.grid(which=&#39;major&#39;, axis=&#39;y&#39;, c=&#39;k&#39;, alpha=.1, zorder=-2) ax.margins(0) ax.set_ylim(0.0, 5.0) ax.set_xlim(pd.Timestamp(&#39;2020-03-01&#39;), result.index.get_level_values(&#39;date&#39;)[-1]+pd.Timedelta(days=1)) fig.set_facecolor(&#39;w&#39;) . def plot_rt_new(result, ax, state_name): ax.set_title(f&quot;{state_name}&quot;) # Colors ABOVE = [1,0,0] MIDDLE = [1,1,1] BELOW = [0,0,0] cmap = ListedColormap(np.r_[ np.linspace(BELOW,MIDDLE,25), np.linspace(MIDDLE,ABOVE,25) ]) color_mapped = lambda y: np.clip(y, .5, 1.5)-.5 index = result[&#39;ML&#39;].index.get_level_values(&#39;date&#39;) values = result[&#39;ML&#39;].values # Plot dots and line ax.plot(index, values, c=&#39;k&#39;, zorder=1, alpha=.25) ax.scatter(index, values, s=40, lw=.5, c=cmap(color_mapped(values)), edgecolors=&#39;k&#39;, zorder=2) # Aesthetically, extrapolate credible interval by 1 day either side lowfn = interp1d(date2num(index), result[&#39;Low_90&#39;].values, bounds_error=False, fill_value=&#39;extrapolate&#39;) highfn = interp1d(date2num(index), result[&#39;High_90&#39;].values, bounds_error=False, fill_value=&#39;extrapolate&#39;) extended = pd.date_range(start=pd.Timestamp(&#39;2020-03-01&#39;), end=index[-1]+pd.Timedelta(days=1)) ax.fill_between(extended, lowfn(date2num(extended)), highfn(date2num(extended)), color=&#39;k&#39;, alpha=.1, lw=0, zorder=3) ax.axhline(1.0, c=&#39;k&#39;, lw=1, label=&#39;$R_t=1.0$&#39;, alpha=.25); ax.axvline(x=pd.Timestamp(&#39;2020-03-24&#39;), ls=&#39;--&#39;, c=&#39;k&#39;, alpha=.25) ax.axvline(x=pd.Timestamp(&#39;2020-04-14&#39;), ls=&#39;--&#39;, c=&#39;k&#39;, alpha=.25) ax.axvline(x=pd.Timestamp(&#39;2020-05-03&#39;), ls=&#39;--&#39;, c=&#39;k&#39;, alpha=.25) ax.text(pd.Timestamp(&#39;2020-03-22&#39;), 0.2, &#39;March 24&#39;, bbox=dict(facecolor=&#39;white&#39;, alpha=0.5)) ax.text(pd.Timestamp(&#39;2020-04-12&#39;), 0.2, &#39;April 14&#39;, bbox=dict(facecolor=&#39;white&#39;, alpha=0.5)) ax.text(pd.Timestamp(&#39;2020-05-02&#39;), 0.2, &#39;May 3&#39;, bbox=dict(facecolor=&#39;white&#39;, alpha=0.5)) result2 = result.reset_index() t1 = pd.Timestamp(&#39;2020-03-24&#39;) t2 = pd.Timestamp(&#39;2020-04-14&#39;) t3 = pd.Timestamp(&#39;2020-05-03&#39;) r1m = result2[result2.state==state_name][result2.date &lt;= t1][&#39;ML&#39;].mean() r1l = result2[result2.state==state_name][result2.date &lt;= t1][&#39;Low_90&#39;].mean() r1h = result2[result2.state==state_name][result2.date &lt;= t1][&#39;High_90&#39;].mean() text1 = f&quot;Pre-lockdown: n {r1m:.2f} [{r1l:.2f}-{r1h:.2f}]&quot; r2m = result2[result2.state==state_name][(result2.date &gt; t1) &amp; (result2.date &lt;= t2)][&#39;ML&#39;].mean() r2l = result2[result2.state==state_name][(result2.date &gt; t1) &amp; (result2.date &lt;= t2)][&#39;Low_90&#39;].mean() r2h = result2[result2.state==state_name][(result2.date &gt; t1) &amp; (result2.date &lt;= t2)][&#39;High_90&#39;].mean() text2 = f&quot;Initial Lockdown: n {r2m:.2f} [{r2l:.2f}-{r2h:.2f}]&quot; r3m = result2[result2.state==state_name][(result2.date &gt; t2) &amp; (result2.date &lt;= t3)][&#39;ML&#39;].mean() r3l = result2[result2.state==state_name][(result2.date &gt; t2) &amp; (result2.date &lt;= t3)][&#39;Low_90&#39;].mean() r3h = result2[result2.state==state_name][(result2.date &gt; t2) &amp; (result2.date &lt;= t3)][&#39;High_90&#39;].mean() text3 = f&quot;First Extension: n {r3m:.2f} [{r3l:.2f}-{r3h:.2f}]&quot; r4m = result2[result2.state==state_name][result2.date &gt; t3][&#39;ML&#39;].mean() r4l = result2[result2.state==state_name][result2.date &gt; t3][&#39;Low_90&#39;].mean() r4h = result2[result2.state==state_name][result2.date &gt; t3][&#39;High_90&#39;].mean() text4 = f&quot;Second Extension: n {r4m:.2f} [{r4l:.2f}-{r4h:.2f}]&quot; if r1m &gt; 0: ax.text(pd.Timestamp(&#39;2020-03-08&#39;), 3.5, text1, bbox=dict(facecolor=&#39;white&#39;, alpha=0.5)) if r2m &gt; 0: ax.text(pd.Timestamp(&#39;2020-03-30&#39;), 3.5, text2, bbox=dict(facecolor=&#39;white&#39;, alpha=0.5)) if r3m &gt; 0: ax.text(pd.Timestamp(&#39;2020-04-20&#39;), 3.5, text3, bbox=dict(facecolor=&#39;white&#39;, alpha=0.5)) if r4m &gt; 0: ax.text(pd.Timestamp(&#39;2020-05-04&#39;), 3.5, text4, bbox=dict(facecolor=&#39;white&#39;, alpha=0.5)) # Formatting ax.xaxis.set_major_locator(mdates.MonthLocator()) ax.xaxis.set_major_formatter(mdates.DateFormatter(&#39;%b&#39;)) ax.xaxis.set_minor_locator(mdates.DayLocator()) ax.yaxis.set_major_locator(ticker.MultipleLocator(1)) ax.yaxis.set_major_formatter(ticker.StrMethodFormatter(&quot;{x:.1f}&quot;)) ax.yaxis.tick_right() ax.spines[&#39;left&#39;].set_visible(False) ax.spines[&#39;bottom&#39;].set_visible(False) ax.spines[&#39;right&#39;].set_visible(False) ax.margins(0) ax.grid(which=&#39;major&#39;, axis=&#39;y&#39;, c=&#39;k&#39;, alpha=.1, zorder=-2) ax.margins(0) ax.set_ylim(0.0, 5.0) ax.set_xlim(pd.Timestamp(&#39;2020-03-01&#39;), result.index.get_level_values(&#39;date&#39;)[-1]+pd.Timedelta(days=1)) fig.set_facecolor(&#39;w&#39;) . def plot_rt_top6(final_results, ax, state_list): ax.set_title(f&quot;All India &amp; Top States&quot;) # Colors ABOVE = [1,0,0] MIDDLE = [1,1,1] BELOW = [0,0,0] cmap = ListedColormap(np.r_[ np.linspace(BELOW,MIDDLE,25), np.linspace(MIDDLE,ABOVE,25) ]) color_mapped = lambda y: np.clip(y, .5, 1.5)-.5 for i, (state_name, result) in enumerate(final_results.groupby(&#39;state&#39;)): if (state_name not in state_list): continue index = result[&#39;ML&#39;].index.get_level_values(&#39;date&#39;) values = result[&#39;ML&#39;].values # Plot dots and line ax.plot(index, values, c=&#39;k&#39;, zorder=1, alpha=.25) ax.scatter(index, values, s=40, lw=.5, label=state_name) ax.legend() ax.axhline(1.0, c=&#39;k&#39;, lw=1, label=&#39;$R_t=1.0$&#39;, alpha=.25); ax.axvline(x=pd.Timestamp(&#39;2020-03-24&#39;), ls=&#39;--&#39;, c=&#39;k&#39;, alpha=.25) ax.axvline(x=pd.Timestamp(&#39;2020-04-14&#39;), ls=&#39;--&#39;, c=&#39;k&#39;, alpha=.25) ax.axvline(x=pd.Timestamp(&#39;2020-05-03&#39;), ls=&#39;--&#39;, c=&#39;k&#39;, alpha=.25) ax.text(pd.Timestamp(&#39;2020-03-22&#39;), 0.2, &#39;March 24&#39;, bbox=dict(facecolor=&#39;white&#39;, alpha=0.5)) ax.text(pd.Timestamp(&#39;2020-04-12&#39;), 0.2, &#39;April 14&#39;, bbox=dict(facecolor=&#39;white&#39;, alpha=0.5)) ax.text(pd.Timestamp(&#39;2020-05-02&#39;), 0.2, &#39;May 3&#39;, bbox=dict(facecolor=&#39;white&#39;, alpha=0.5)) result2 = result.reset_index() text1 = f&quot;Pre-lockdown:&quot; text2 = f&quot;Initial Lockdown:&quot; text3 = f&quot;First Extension:&quot; text4 = f&quot;Second Extension:&quot; ax.text(pd.Timestamp(&#39;2020-03-08&#39;), 3.5, text1, bbox=dict(facecolor=&#39;white&#39;, alpha=0.5)) ax.text(pd.Timestamp(&#39;2020-03-30&#39;), 3.5, text2, bbox=dict(facecolor=&#39;white&#39;, alpha=0.5)) ax.text(pd.Timestamp(&#39;2020-04-20&#39;), 3.5, text3, bbox=dict(facecolor=&#39;white&#39;, alpha=0.5)) ax.text(pd.Timestamp(&#39;2020-05-04&#39;), 3.5, text4, bbox=dict(facecolor=&#39;white&#39;, alpha=0.5)) # Formatting ax.xaxis.set_major_locator(mdates.MonthLocator()) ax.xaxis.set_major_formatter(mdates.DateFormatter(&#39;%b&#39;)) ax.xaxis.set_minor_locator(mdates.DayLocator()) ax.yaxis.set_major_locator(ticker.MultipleLocator(1)) ax.yaxis.set_major_formatter(ticker.StrMethodFormatter(&quot;{x:.1f}&quot;)) ax.yaxis.tick_right() ax.spines[&#39;left&#39;].set_visible(False) ax.spines[&#39;bottom&#39;].set_visible(False) ax.spines[&#39;right&#39;].set_visible(False) ax.margins(0) ax.grid(which=&#39;major&#39;, axis=&#39;y&#39;, c=&#39;k&#39;, alpha=.1, zorder=-2) ax.margins(0) ax.set_ylim(0.0, 5.0) ax.set_xlim(pd.Timestamp(&#39;2020-03-01&#39;), result.index.get_level_values(&#39;date&#39;)[-1]+pd.Timedelta(days=1)) fig.set_facecolor(&#39;w&#39;) . #state_list = [&#39;MH&#39;, &#39;RJ&#39;, &#39;TN&#39;, &#39;TT&#39;, &#39;DL&#39;, &#39;KL&#39;, &#39;GJ&#39;, &#39;PB&#39;] state_list = [&#39;MH&#39;, &#39;TN&#39;, &#39;TT&#39;, &#39;GJ&#39;, &#39;KL&#39;] fig, ax = plt.subplots(figsize=(1200/72,800/72)) plot_rt_top6(final_results, ax, state_list) . ncols = 1 nrows = 1 plt.rcParams.update({&#39;figure.max_open_warning&#39;: 0}) for i, (state_name, result) in enumerate(final_results.groupby(&#39;state&#39;)): if i == 0: continue fig, ax = plt.subplots(figsize=(900/72,600/72)) plot_rt_new(result, ax, state_name) . ncols = 4 nrows = int(np.ceil(len(results) / ncols)) fig, axes = plt.subplots(nrows=nrows, ncols=ncols, figsize=(15, nrows*3)) for i, (state_name, result) in enumerate(final_results.groupby(&#39;state&#39;)): plot_rt(result, axes.flat[i], state_name) fig.tight_layout() fig.set_facecolor(&#39;w&#39;) . Export Data to CSV . # Uncomment the following line if you&#39;d like to export the data final_results.to_csv(&#39;data/rt_india_state.csv&#39;) . tmpdf = final_results.reset_index() tmpdf[tmpdf.date == &#39;2020-05-13&#39;].sort_values(by=&#39;ML&#39;, ascending=True).shape . Standings . # As of 4/12 no_lockdown = [ ] partial_lockdown = [ ] FULL_COLOR = [.7,.7,.7] NONE_COLOR = [179/255,35/255,14/255] PARTIAL_COLOR = [.5,.5,.5] ERROR_BAR_COLOR = [.3,.3,.3] . final_results . filtered = final_results.index.get_level_values(0).isin(FILTERED_REGIONS) mr = final_results.loc[~filtered].groupby(level=0)[[&#39;ML&#39;, &#39;High_90&#39;, &#39;Low_90&#39;]].last() def plot_standings(mr, figsize=None, title=&#39;Most Recent $R_t$ by State&#39;): if not figsize: figsize = ((15.9/50)*len(mr)+.1,2.5) fig, ax = plt.subplots(figsize=figsize) ax.set_title(title) err = mr[[&#39;Low_90&#39;, &#39;High_90&#39;]].sub(mr[&#39;ML&#39;], axis=0).abs() bars = ax.bar(mr.index, mr[&#39;ML&#39;], width=.825, color=FULL_COLOR, ecolor=ERROR_BAR_COLOR, capsize=2, error_kw={&#39;alpha&#39;:.5, &#39;lw&#39;:1}, yerr=err.values.T) for bar, state_name in zip(bars, mr.index): if state_name in no_lockdown: bar.set_color(NONE_COLOR) if state_name in partial_lockdown: bar.set_color(PARTIAL_COLOR) labels = mr.index.to_series().replace({&#39;District of Columbia&#39;:&#39;DC&#39;}) ax.set_xticklabels(labels, rotation=90, fontsize=11) ax.margins(0) ax.set_ylim(0,2.) ax.axhline(1.0, linestyle=&#39;:&#39;, color=&#39;k&#39;, lw=1) leg = ax.legend(handles=[ Patch(label=&#39;Full&#39;, color=FULL_COLOR), Patch(label=&#39;Partial&#39;, color=PARTIAL_COLOR), Patch(label=&#39;None&#39;, color=NONE_COLOR) ], title=&#39;Lockdown&#39;, ncol=3, loc=&#39;upper left&#39;, columnspacing=.75, handletextpad=.5, handlelength=1) leg._legend_box.align = &quot;left&quot; fig.set_facecolor(&#39;w&#39;) return fig, ax mr.sort_values(&#39;ML&#39;, inplace=True) plot_standings(mr); . mr.sort_values(&#39;High_90&#39;, inplace=True) plot_standings(mr); . show = mr[mr.High_90.le(1)].sort_values(&#39;ML&#39;) fig, ax = plot_standings(show, title=&#39;Likely Under Control&#39;); . show = mr[mr.Low_90.ge(1.0)].sort_values(&#39;Low_90&#39;) fig, ax = plot_standings(show, title=&#39;Likely Not Under Control&#39;); ax.get_legend().remove() .",
            "url": "https://sanzgiri.github.io/covid-19-dashboards/2022/11/10/Realtime_R0_India_By_State.html",
            "relUrl": "/2022/11/10/Realtime_R0_India_By_State.html",
            "date": " • Nov 10, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Realtime R_0 for India by District",
            "content": "An Exception was encountered at &#39;In [11]&#39;. . Updated with latest changes to https://github.com/k-sys/covid-19/blob/master/Realtime%20R0.ipynb . from IPython.core.display import display, HTML display(HTML(&quot;&lt;style&gt;.container { width:100% !important; }&lt;/style&gt;&quot;)) . Estimating COVID-19&#39;s $R_t$ in Real-Time . Kevin Systrom - April 17 . In any epidemic, $R_t$ is the measure known as the effective reproduction number. It&#39;s the number of people who become infected per infectious person at time $t$. The most well-known version of this number is the basic reproduction number: $R_0$ when $t=0$. However, $R_0$ is a single measure that does not adapt with changes in behavior and restrictions. . As a pandemic evolves, increasing restrictions (or potential releasing of restrictions) changes $R_t$. Knowing the current $R_t$ is essential. When $R gg1$, the pandemic will spread through a large part of the population. If $R_t&lt;1$, the pandemic will slow quickly before it has a chance to infect many people. The lower the $R_t$: the more manageable the situation. In general, any $R_t&lt;1$ means things are under control. . The value of $R_t$ helps us in two ways. (1) It helps us understand how effective our measures have been controlling an outbreak and (2) it gives us vital information about whether we should increase or reduce restrictions based on our competing goals of economic prosperity and human safety. Well-respected epidemiologists argue that tracking $R_t$ is the only way to manage through this crisis. . Yet, today, we don&#39;t yet use $R_t$ in this way. In fact, the only real-time measure I&#39;ve seen has been for Hong Kong. More importantly, it is not useful to understand $R_t$ at a national level. Instead, to manage this crisis effectively, we need a local (state, county and/or city) granularity of $R_t$. . What follows is a solution to this problem at the US State level. It&#39;s a modified version of a solution created by Bettencourt &amp; Ribeiro 2008 to estimate real-time $R_t$ using a Bayesian approach. While this paper estimates a static $R$ value, here we introduce a process model with Gaussian noise to estimate a time-varying $R_t$. . If you have questions, comments, or improvments feel free to get in touch: hello@systrom.com. And if it&#39;s not entirely clear, I&#39;m not an epidemiologist. At the same time, data is data, and statistics are statistics and this is based on work by well-known epidemiologists so you can calibrate your beliefs as you wish. In the meantime, I hope you can learn something new as I did by reading through this example. Feel free to take this work and apply it elsewhere – internationally or to counties in the United States. . Additionally, a huge thanks to Frank Dellaert who suggested the addition of the process and to Adam Lerer who implemented the changes. Not only did I learn something new, it made the model much more responsive. . import pandas as pd import numpy as np from matplotlib import pyplot as plt from matplotlib.dates import date2num, num2date from matplotlib import dates as mdates from matplotlib import ticker from matplotlib.colors import ListedColormap from matplotlib.patches import Patch from scipy import stats as sps from scipy.interpolate import interp1d from IPython.display import clear_output FILTERED_REGIONS = [] FILTERED_REGION_CODES = [] %config InlineBackend.figure_format = &#39;retina&#39; . Bettencourt &amp; Ribeiro&#39;s Approach . Every day, we learn how many more people have COVID-19. This new case count gives us a clue about the current value of $R_t$. We also, figure that the value of $R_t$ today is related to the value of $R_{t-1}$ (yesterday&#39;s value) and every previous value of $R_{t-m}$ for that matter. . With these insights, the authors use Bayes&#39; rule to update their beliefs about the true value of $R_t$ based on how many new cases have been reported each day. . This is Bayes&#39; Theorem as we&#39;ll use it: . $$ P(R_t|k)= frac{P(k|R_t) cdot P(R_t)}{P(k)} $$ . This says that, having seen $k$ new cases, we believe the distribution of $R_t$ is equal to: . The likelihood of seeing $k$ new cases given $R_t$ times ... | The prior beliefs of the value of $P(R_t)$ without the data ... | divided by the probability of seeing this many cases in general. | . This is for a single day. To make it iterative: every day that passes, we use yesterday&#39;s prior $P(R_{t-1})$ to estimate today&#39;s prior $P(R_t)$. We will assume the distribution of $R_t$ to be a Gaussian centered around $R_{t-1}$, so $P(R_t|R_{t-1})= mathcal{N}(R_{t-1}, sigma)$, where $ sigma$ is a hyperparameter (see below on how we estimate $ sigma$). So on day one: . $$ P(R_1|k_1) propto P(R_1) cdot mathcal{L}(R_1|k_1)$$ . On day two: . $$ P(R_2|k_1,k_2) propto P(R_2) cdot mathcal{L}(R_2|k_2) = sum_{R_1} {P(R_1|k_1) cdot P(R_2|R_1) cdot mathcal{L}(R_2|k_2) }$$ . etc. . Choosing a Likelihood Function $P left(k_t|R_t right)$ . A likelihood function function says how likely we are to see $k$ new cases, given a value of $R_t$. . Any time you need to model &#39;arrivals&#39; over some time period of time, statisticians like to use the Poisson Distribution. Given an average arrival rate of $ lambda$ new cases per day, the probability of seeing $k$ new cases is distributed according to the Poisson distribution: . $$P(k| lambda) = frac{ lambda^k e^{- lambda}}{k!}$$ . # Column vector of k k = np.arange(0, 70)[:, None] # Different values of Lambda lambdas = [10, 20, 30, 40] # Evaluated the Probability Mass Function (remember: poisson is discrete) y = sps.poisson.pmf(k, lambdas) # Show the resulting shape print(y.shape) . (70, 4) . Note:this was a terse expression which makes it tricky. All I did was to make $k$ a column. By giving it a column for $k$ and a &#39;row&#39; for lambda it will evaluate the pmf over both and produce an array that has $k$ rows and lambda columns. This is an efficient way of producing many distributions all at once, and you will see it used again below! . fig, ax = plt.subplots() ax.set(title=&#39;Poisson Distribution of Cases n $p(k| lambda)$&#39;) plt.plot(k, y, marker=&#39;o&#39;, markersize=3, lw=0) plt.legend(title=&quot;$ lambda$&quot;, labels=lambdas); . findfont: Font family [&#39;sans-serif&#39;] not found. Falling back to DejaVu Sans. findfont: Font family [&#39;sans-serif&#39;] not found. Falling back to DejaVu Sans. . The Poisson distribution says that if you think you&#39;re going to have $ lambda$ cases per day, you&#39;ll probably get that many, plus or minus some variation based on chance. . But in our case, we know there have been $k$ cases and we need to know what value of $ lambda$ is most likely. In order to do this, we fix $k$ in place while varying $ lambda$. This is called the likelihood function. . For example, imagine we observe $k=20$ new cases, and we want to know how likely each $ lambda$ is: . k = 20 lam = np.linspace(1, 45, 90) likelihood = pd.Series(data=sps.poisson.pmf(k, lam), index=pd.Index(lam, name=&#39;$ lambda$&#39;), name=&#39;lambda&#39;) likelihood.plot(title=r&#39;Likelihood $P left(k_t=20| lambda right)$&#39;); . findfont: Font family [&#39;sans-serif&#39;] not found. Falling back to DejaVu Sans. . This says that if we see 20 cases, the most likely value of $ lambda$ is (not surprisingly) 20. But we&#39;re not certain: it&#39;s possible lambda was 21 or 17 and saw 20 new cases by chance alone. It also says that it&#39;s unlikely $ lambda$ was 40 and we saw 20. . Great. We have $P left( lambda_t|k_t right)$ which is parameterized by $ lambda$ but we were looking for $P left(k_t|R_t right)$ which is parameterized by $R_t$. We need to know the relationship between $ lambda$ and $R_t$ . Connecting $ lambda$ and $R_t$ . The key insight to making this work is to realize there&#39;s a connection between $R_t$ and $ lambda$. The derivation is beyond the scope of this notebook, but here it is: . $$ lambda = k_{t-1}e^{ gamma(R_t-1)}$$ . where $ gamma$ is the reciprocal of the serial interval (about 7 days for COVID19). Since we know every new case count on the previous day, we can now reformulate the likelihood function as a Poisson parameterized by fixing $k$ and varying $R_t$. . $$ lambda = k_{t-1}e^{ gamma(R_t-1)}$$ . $$P left(k|R_t right) = frac{ lambda^k e^{- lambda}}{k!}$$ . Evaluating the Likelihood Function . To continue our example, let&#39;s imagine a sample of new case counts $k$. What is the likelihood of different values of $R_t$ on each of those days? . k = np.array([20, 40, 55, 90]) # We create an array for every possible value of Rt R_T_MAX = 12 r_t_range = np.linspace(0, R_T_MAX, R_T_MAX*100+1) # Gamma is 1/serial interval # https://wwwnc.cdc.gov/eid/article/26/7/20-0282_article # https://www.nejm.org/doi/full/10.1056/NEJMoa2001316 GAMMA = 1/4 # Map Rt into lambda so we can substitute it into the equation below # Note that we have N-1 lambdas because on the first day of an outbreak # you do not know what to expect. lam = k[:-1] * np.exp(GAMMA * (r_t_range[:, None] - 1)) # Evaluate the likelihood on each day and normalize sum of each day to 1.0 likelihood_r_t = sps.poisson.pmf(k[1:], lam) likelihood_r_t /= np.sum(likelihood_r_t, axis=0) # Plot it ax = pd.DataFrame( data = likelihood_r_t, index = r_t_range ).plot( title=&#39;Likelihood of $R_t$ given $k$&#39;, xlim=(0,10), figsize=(6, 2.5) ) ax.legend(labels=k[1:], title=&#39;New Cases&#39;) ax.set_xlabel(&#39;$R_t$&#39;); . You can see that each day we have a independent guesses for $R_t$. The goal is to combine the information we have about previous days with the current day. To do this, we use Bayes&#39; theorem. . Performing the Bayesian Update . To perform the Bayesian update, we need to multiply the likelihood by the prior (which is just the previous day&#39;s likelihood without our Gaussian update) to get the posteriors. Let&#39;s do that using the cumulative product of each successive day: . posteriors = likelihood_r_t.cumprod(axis=1) posteriors = posteriors / np.sum(posteriors, axis=0) columns = pd.Index(range(1, posteriors.shape[1]+1), name=&#39;Day&#39;) posteriors = pd.DataFrame( data = posteriors, index = r_t_range, columns = columns) ax = posteriors.plot( title=&#39;Posterior $P(R_t|k)$&#39;, xlim=(0,10), figsize=(6,2.5) ) ax.legend(title=&#39;Day&#39;) ax.set_xlabel(&#39;$R_t$&#39;); . Notice how on Day 1, our posterior matches Day 1&#39;s likelihood from above? That&#39;s because we have no information other than that day. However, when we update the prior using Day 2&#39;s information, you can see the curve has moved left, but not nearly as left as the likelihood for Day 2 from above. This is because Bayesian updating uses information from both days and effectively averages the two. Since Day 3&#39;s likelihood is in between the other two, you see a small shift to the right, but more importantly: a narrower distribution. We&#39;re becoming more confident in our believes of the true value of $R_t$. . From these posteriors, we can answer important questions such as &quot;What is the most likely value of $R_t$ each day?&quot; . most_likely_values = posteriors.idxmax(axis=0) most_likely_values . Day 1 3.77 2 2.84 3 2.90 dtype: float64 . We can also obtain the highest density intervals for $R_t$: . def highest_density_interval(pmf, p=.9, debug=False): # If we pass a DataFrame, just call this recursively on the columns if(isinstance(pmf, pd.DataFrame)): return pd.DataFrame([highest_density_interval(pmf[col], p=p) for col in pmf], index=pmf.columns) cumsum = np.cumsum(pmf.values) # N x N matrix of total probability mass for each low, high total_p = cumsum - cumsum[:, None] # Return all indices with total_p &gt; p lows, highs = (total_p &gt; p).nonzero() # Find the smallest range (highest density) best = (highs - lows).argmin() low = pmf.index[lows[best]] high = pmf.index[highs[best]] return pd.Series([low, high], index=[f&#39;Low_{p*100:.0f}&#39;, f&#39;High_{p*100:.0f}&#39;]) hdi = highest_density_interval(posteriors, debug=True) hdi.tail() . Low_90 High_90 . Day . 1 2.66 | 4.75 | . 2 2.10 | 3.46 | . 3 2.39 | 3.36 | . Finally, we can plot both the most likely values for $R_t$ and the HDIs over time. This is the most useful representation as it shows how our beliefs change with every day. . ax = most_likely_values.plot(marker=&#39;o&#39;, label=&#39;Most Likely&#39;, title=f&#39;$R_t$ by day&#39;, c=&#39;k&#39;, markersize=4) ax.fill_between(hdi.index, hdi[&#39;Low_90&#39;], hdi[&#39;High_90&#39;], color=&#39;k&#39;, alpha=.1, lw=0, label=&#39;HDI&#39;) ax.legend(); . We can see that the most likely value of $R_t$ changes with time and the highest-density interval narrows as we become more sure of the true value of $R_t$ over time. Note that since we only had four days of history, I did not apply the process to this sample. Next, however, we&#39;ll turn to a real-world application where this process is necessary. . Real-World Application to India Data . Setup . Daily district-level data from India is available in json format here: https://api.covid19india.org/districts_daily.json. There are 780 districts, 38 states. Data only goes back to ~ April 21. . Execution using papermill encountered an exception here and stopped: . df = pd.read_json(&quot;https://api.covid19india.org/districts_daily.json&quot;, orient=&#39;records&#39;).reset_index() . HTTPError Traceback (most recent call last) &lt;ipython-input-11-dc4299c4340d&gt; in &lt;module&gt; -&gt; 1 df = pd.read_json(&#34;https://api.covid19india.org/districts_daily.json&#34;, orient=&#39;records&#39;).reset_index() /opt/hostedtoolcache/Python/3.6.15/x64/lib/python3.6/site-packages/pandas/util/_decorators.py in wrapper(*args, **kwargs) 197 else: 198 kwargs[new_arg_name] = new_arg_value --&gt; 199 return func(*args, **kwargs) 200 201 return cast(F, wrapper) /opt/hostedtoolcache/Python/3.6.15/x64/lib/python3.6/site-packages/pandas/util/_decorators.py in wrapper(*args, **kwargs) 294 ) 295 warnings.warn(msg, FutureWarning, stacklevel=stacklevel) --&gt; 296 return func(*args, **kwargs) 297 298 return wrapper /opt/hostedtoolcache/Python/3.6.15/x64/lib/python3.6/site-packages/pandas/io/json/_json.py in read_json(path_or_buf, orient, typ, dtype, convert_axes, convert_dates, keep_default_dates, numpy, precise_float, date_unit, encoding, lines, chunksize, compression, nrows) 592 compression = infer_compression(path_or_buf, compression) 593 filepath_or_buffer, _, compression, should_close = get_filepath_or_buffer( --&gt; 594 path_or_buf, encoding=encoding, compression=compression 595 ) 596 /opt/hostedtoolcache/Python/3.6.15/x64/lib/python3.6/site-packages/pandas/io/common.py in get_filepath_or_buffer(filepath_or_buffer, encoding, compression, mode, storage_options) 181 if isinstance(filepath_or_buffer, str) and is_url(filepath_or_buffer): 182 # TODO: fsspec can also handle HTTP via requests, but leaving this unchanged --&gt; 183 req = urlopen(filepath_or_buffer) 184 content_encoding = req.headers.get(&#34;Content-Encoding&#34;, None) 185 if content_encoding == &#34;gzip&#34;: /opt/hostedtoolcache/Python/3.6.15/x64/lib/python3.6/site-packages/pandas/io/common.py in urlopen(*args, **kwargs) 135 import urllib.request 136 --&gt; 137 return urllib.request.urlopen(*args, **kwargs) 138 139 /opt/hostedtoolcache/Python/3.6.15/x64/lib/python3.6/urllib/request.py in urlopen(url, data, timeout, cafile, capath, cadefault, context) 221 else: 222 opener = _opener --&gt; 223 return opener.open(url, data, timeout) 224 225 def install_opener(opener): /opt/hostedtoolcache/Python/3.6.15/x64/lib/python3.6/urllib/request.py in open(self, fullurl, data, timeout) 530 for processor in self.process_response.get(protocol, []): 531 meth = getattr(processor, meth_name) --&gt; 532 response = meth(req, response) 533 534 return response /opt/hostedtoolcache/Python/3.6.15/x64/lib/python3.6/urllib/request.py in http_response(self, request, response) 640 if not (200 &lt;= code &lt; 300): 641 response = self.parent.error( --&gt; 642 &#39;http&#39;, request, response, code, msg, hdrs) 643 644 return response /opt/hostedtoolcache/Python/3.6.15/x64/lib/python3.6/urllib/request.py in error(self, proto, *args) 562 http_err = 0 563 args = (dict, proto, meth_name) + args --&gt; 564 result = self._call_chain(*args) 565 if result: 566 return result /opt/hostedtoolcache/Python/3.6.15/x64/lib/python3.6/urllib/request.py in _call_chain(self, chain, kind, meth_name, *args) 502 for handler in handlers: 503 func = getattr(handler, meth_name) --&gt; 504 result = func(*args) 505 if result is not None: 506 return result /opt/hostedtoolcache/Python/3.6.15/x64/lib/python3.6/urllib/request.py in http_error_302(self, req, fp, code, msg, headers) 754 fp.close() 755 --&gt; 756 return self.parent.open(new, timeout=req.timeout) 757 758 http_error_301 = http_error_303 = http_error_307 = http_error_302 /opt/hostedtoolcache/Python/3.6.15/x64/lib/python3.6/urllib/request.py in open(self, fullurl, data, timeout) 530 for processor in self.process_response.get(protocol, []): 531 meth = getattr(processor, meth_name) --&gt; 532 response = meth(req, response) 533 534 return response /opt/hostedtoolcache/Python/3.6.15/x64/lib/python3.6/urllib/request.py in http_response(self, request, response) 640 if not (200 &lt;= code &lt; 300): 641 response = self.parent.error( --&gt; 642 &#39;http&#39;, request, response, code, msg, hdrs) 643 644 return response /opt/hostedtoolcache/Python/3.6.15/x64/lib/python3.6/urllib/request.py in error(self, proto, *args) 562 http_err = 0 563 args = (dict, proto, meth_name) + args --&gt; 564 result = self._call_chain(*args) 565 if result: 566 return result /opt/hostedtoolcache/Python/3.6.15/x64/lib/python3.6/urllib/request.py in _call_chain(self, chain, kind, meth_name, *args) 502 for handler in handlers: 503 func = getattr(handler, meth_name) --&gt; 504 result = func(*args) 505 if result is not None: 506 return result /opt/hostedtoolcache/Python/3.6.15/x64/lib/python3.6/urllib/request.py in http_error_302(self, req, fp, code, msg, headers) 754 fp.close() 755 --&gt; 756 return self.parent.open(new, timeout=req.timeout) 757 758 http_error_301 = http_error_303 = http_error_307 = http_error_302 /opt/hostedtoolcache/Python/3.6.15/x64/lib/python3.6/urllib/request.py in open(self, fullurl, data, timeout) 530 for processor in self.process_response.get(protocol, []): 531 meth = getattr(processor, meth_name) --&gt; 532 response = meth(req, response) 533 534 return response /opt/hostedtoolcache/Python/3.6.15/x64/lib/python3.6/urllib/request.py in http_response(self, request, response) 640 if not (200 &lt;= code &lt; 300): 641 response = self.parent.error( --&gt; 642 &#39;http&#39;, request, response, code, msg, hdrs) 643 644 return response /opt/hostedtoolcache/Python/3.6.15/x64/lib/python3.6/urllib/request.py in error(self, proto, *args) 568 if http_err: 569 args = (dict, &#39;default&#39;, &#39;http_error_default&#39;) + orig_args --&gt; 570 return self._call_chain(*args) 571 572 # XXX probably also want an abstract factory that knows when it makes /opt/hostedtoolcache/Python/3.6.15/x64/lib/python3.6/urllib/request.py in _call_chain(self, chain, kind, meth_name, *args) 502 for handler in handlers: 503 func = getattr(handler, meth_name) --&gt; 504 result = func(*args) 505 if result is not None: 506 return result /opt/hostedtoolcache/Python/3.6.15/x64/lib/python3.6/urllib/request.py in http_error_default(self, req, fp, code, msg, hdrs) 648 class HTTPDefaultErrorHandler(BaseHandler): 649 def http_error_default(self, req, fp, code, msg, hdrs): --&gt; 650 raise HTTPError(req.full_url, code, msg, hdrs, fp) 651 652 class HTTPRedirectHandler(BaseHandler): HTTPError: HTTP Error 404: Not Found . Convert data into a format we can consume for this analysis . dft = pd.DataFrame() for i in range(len(df)): state = df[&#39;index&#39;].iloc[i] x = df.districtsDaily.iloc[i] for k in x.keys(): dfk = pd.DataFrame.from_dict(x[k]) dfk[&#39;district&#39;] = k dfk[&#39;state&#39;] = state dft = dft.append(dfk) cols = [&#39;state&#39;, &#39;district&#39;, &#39;date&#39;, &#39;confirmed&#39;, &#39;active&#39;, &#39;recovered&#39;, &#39;deceased&#39;, &#39;notes&#39;] dft = dft[cols] dft[&#39;date&#39;] = pd.to_datetime(dft[&#39;date&#39;]) dft[&#39;fatality_rate&#39;] = dft[&#39;deceased&#39;]/dft[&#39;confirmed&#39;] dft[&#39;recovery_rate&#39;] = dft[&#39;recovered&#39;]/dft[&#39;confirmed&#39;] . dft.head() . dft.to_csv(&#39;districts_daily.csv&#39;) . These groupings are primarily to filter the data. We want to exclude districts with max confirmed cases &lt; 100 and states with max confirmed cases &lt; 150 . MAX_CASES_BY_STATE = 150 MAX_CASES_BY_DISTRICT = 100 . dftg = dft.groupby([&#39;state&#39;, &#39;district&#39;])[&#39;confirmed&#39;].max().reset_index() dftgs = dft.groupby([&#39;state&#39;])[&#39;confirmed&#39;].max().reset_index() . state_list = dftgs[dftgs.confirmed &gt; MAX_CASES_BY_STATE][&#39;state&#39;].tolist() len(state_list) . dftg2 = dftg[(dftg.confirmed &gt; MAX_CASES_BY_DISTRICT) &amp; (dftg.state.isin(state_list))] len(dftg2) . There are 24 states and 285 districts meeting this criteria. Subsequent analysis will select one of these states. Note there are cases in &quot;State Unassigned&quot; category. . state_list . state = &#39;Maharashtra&#39; . district_list = dftg2[dftg2.state == &#39;Maharashtra&#39;][&#39;district&#39;].unique() district_list . dfa = dft[(dft.state == state) &amp; (dft.district.isin(district_list))][[&#39;date&#39;,&#39;district&#39;, &#39;confirmed&#39;]] . dfa = dfa[dfa.district != &#39;Unknown&#39;] district_list = dfa.district.unique() district_list . dfa.head() . districts = dfa.set_index([&#39;district&#39;, &#39;date&#39;]).squeeze() . districts . Running the Algorithm . Choosing the Gaussian $ sigma$ for $P(R_t|R_{t-1})$ . . Note: you can safely skip this section if you trust that we chose the right value of $ sigma$ for the process below. Otherwise, read on. The original approach simply selects yesterday&#39;s posterior as today&#39;s prior. While intuitive, doing so doesn&#39;t allow for our belief that the value of $R_t$ has likely changed from yesterday. To allow for that change, we apply Gaussian noise to the prior distribution with some standard deviation $ sigma$. The higher $ sigma$ the more noise and the more we will expect the value of $R_t$ to drift each day. Interestingly, applying noise on noise iteratively means that there will be a natural decay of distant posteriors. This approach has a similar effect of windowing, but is more robust and doesn&#39;t arbitrarily forget posteriors after a certain time like my previous approach. Specifically, windowing computed a fixed $R_t$ at each time $t$ that explained the surrounding $w$ days of cases, while the new approach computes a series of $R_t$ values that explains all the cases, assuming that $R_t$ fluctuates by about $ sigma$ each day. . However, there&#39;s still an arbitrary choice: what should $ sigma$ be? Adam Lerer pointed out that we can use the process of maximum likelihood to inform our choice. Here&#39;s how it works: . Maximum likelihood says that we&#39;d like to choose a $ sigma$ that maximizes the likelihood of seeing our data $k$: $P(k| sigma)$. Since $ sigma$ is a fixed value, let&#39;s leave it out of the notation, so we&#39;re trying to maximize $P(k)$ over all choices of $ sigma$. . Since $P(k)=P(k_0,k_1, ldots,k_t)=P(k_0)P(k_1) ldots P(k_t)$ we need to define $P(k_t)$. It turns out this is the denominator of Bayes rule: . $$P(R_t|k_t) = frac{P(k_t|R_t)P(R_t)}{P(k_t)}$$ . To calculate it, we notice that the numerator is actually just the joint distribution of $k$ and $R$: . $$ P(k_t,R_t) = P(k_t|R_t)P(R_t) $$ . We can marginalize the distribution over $R_t$ to get $P(k_t)$: . $$ P(k_t) = sum_{R_{t}}{P(k_t|R_t)P(R_t)} $$ . So, if we sum the distribution of the numerator over all values of $R_t$, we get $P(k_t)$. And since we&#39;re calculating that anyway as we&#39;re calculating the posterior, we&#39;ll just keep track of it separately. . Since we&#39;re looking for the value of $ sigma$ that maximizes $P(k)$ overall, we actually want to maximize: . $$ prod_{t,i}{p(k_{ti})}$$ . where $t$ are all times and $i$ is each state. . Since we&#39;re multiplying lots of tiny probabilities together, it can be easier (and less error-prone) to take the $ log$ of the values and add them together. Remember that $ log{ab}= log{a}+ log{b}$. And since logarithms are monotonically increasing, maximizing the sum of the $ log$ of the probabilities is the same as maximizing the product of the non-logarithmic probabilities for any choice of $ sigma$. . Function for Calculating the Posteriors . To calculate the posteriors we follow these steps: . Calculate $ lambda$ - the expected arrival rate for every day&#39;s poisson process | Calculate each day&#39;s likelihood distribution over all possible values of $R_t$ | Calculate the process matrix based on the value of $ sigma$ we discussed above | Calculate our initial prior because our first day does not have a previous day from which to take the posterior Based on info from the cdc we will choose a Gamma with mean 7. | . | Loop from day 1 to the end, doing the following: Calculate the prior by applying the Gaussian to yesterday&#39;s prior. | Apply Bayes&#39; rule by multiplying this prior and the likelihood we calculated in step 2. | Divide by the probability of the data (also Bayes&#39; rule) | . | def prepare_cases(cases, cutoff=25): new_cases = cases.diff() smoothed = new_cases.rolling(7, win_type=&#39;gaussian&#39;, min_periods=1, center=True).mean(std=2).round() idx_start = np.searchsorted(smoothed, cutoff) smoothed = smoothed.iloc[idx_start:] original = new_cases.loc[smoothed.index] return original, smoothed . def get_posteriors(sr, sigma=0.15): # (1) Calculate Lambda lam = sr[:-1].values * np.exp(GAMMA * (r_t_range[:, None] - 1)) # (2) Calculate each day&#39;s likelihood likelihoods = pd.DataFrame( data = sps.poisson.pmf(sr[1:].values, lam), index = r_t_range, columns = sr.index[1:]) # (3) Create the Gaussian Matrix process_matrix = sps.norm(loc=r_t_range, scale=sigma ).pdf(r_t_range[:, None]) # (3a) Normalize all rows to sum to 1 process_matrix /= process_matrix.sum(axis=0) # (4) Calculate the initial prior #prior0 = sps.gamma(a=4).pdf(r_t_range) prior0 = np.ones_like(r_t_range)/len(r_t_range) prior0 /= prior0.sum() # Create a DataFrame that will hold our posteriors for each day # Insert our prior as the first posterior. posteriors = pd.DataFrame( index=r_t_range, columns=sr.index, data={sr.index[0]: prior0} ) # We said we&#39;d keep track of the sum of the log of the probability # of the data for maximum likelihood calculation. log_likelihood = 0.0 # (5) Iteratively apply Bayes&#39; rule for previous_day, current_day in zip(sr.index[:-1], sr.index[1:]): #(5a) Calculate the new prior current_prior = process_matrix @ posteriors[previous_day] #(5b) Calculate the numerator of Bayes&#39; Rule: P(k|R_t)P(R_t) numerator = likelihoods[current_day] * current_prior #(5c) Calcluate the denominator of Bayes&#39; Rule P(k) denominator = np.sum(numerator) # Execute full Bayes&#39; Rule posteriors[current_day] = numerator/denominator # Add to the running sum of log likelihoods log_likelihood += np.log(denominator) return posteriors, log_likelihood . Choosing the optimal $ sigma$ . In the previous section we described choosing an optimal $ sigma$, but we just assumed a value. But now that we can evaluate each state with any sigma, we have the tools for choosing the optimal $ sigma$. . Above we said we&#39;d choose the value of $ sigma$ that maximizes the likelihood of the data $P(k)$. Since we don&#39;t want to overfit on any one state, we choose the sigma that maximizes $P(k)$ over every state. To do this, we add up all the log likelihoods per state for each value of sigma then choose the maximum. . Note: this takes a while! . sigmas = np.linspace(1/20, 1, 20) targets = ~districts.index.get_level_values(&#39;district&#39;).isin(FILTERED_REGION_CODES) districts_to_process = districts.loc[targets] results = {} failed_districts = [] for district_name, cases in districts_to_process.groupby(level=&#39;district&#39;): print(district_name) # Only difference with KS code new, smoothed = prepare_cases(cases, cutoff=1) # KS uses cutoff of 25 followed by 10 #new, smoothed = prepare_cases(cases, cutoff=25) #if len(smoothed) == 0: # new, smoothed = prepare_cases(cases, cutoff=10) result = {} # Holds all posteriors with every given value of sigma result[&#39;posteriors&#39;] = [] # Holds the log likelihood across all k for each value of sigma result[&#39;log_likelihoods&#39;] = [] try: for sigma in sigmas: posteriors, log_likelihood = get_posteriors(smoothed, sigma=sigma) result[&#39;posteriors&#39;].append(posteriors) result[&#39;log_likelihoods&#39;].append(log_likelihood) # Store all results keyed off of district name results[district_name] = result clear_output(wait=True) except: print(f&quot;Error for district {district_name}&quot;) failed_districts.append(district_name) print(&#39;Done.&#39;) . print(f&quot;Failed for {len(failed_districts)} districts {failed_districts}&quot;) . Now that we have all the log likelihoods, we can sum for each value of sigma across districts, graph it, then choose the maximum. . # Each index of this array holds the total of the log likelihoods for # the corresponding index of the sigmas array. total_log_likelihoods = np.zeros_like(sigmas) # Loop through each district&#39;s results and add the log likelihoods to the running total. for district_name, result in results.items(): total_log_likelihoods += result[&#39;log_likelihoods&#39;] # Select the index with the largest log likelihood total max_likelihood_index = total_log_likelihoods.argmax() # Select the value that has the highest log likelihood sigma = sigmas[max_likelihood_index] # Plot it fig, ax = plt.subplots() ax.set_title(f&quot;Maximum Likelihood value for $ sigma$ = {sigma:.2f}&quot;); ax.plot(sigmas, total_log_likelihoods) ax.axvline(sigma, color=&#39;k&#39;, linestyle=&quot;:&quot;) . Compile Final Results . Given that we&#39;ve selected the optimal $ sigma$, let&#39;s grab the precalculated posterior corresponding to that value of $ sigma$ for each district. Let&#39;s also calculate the 90% and 50% highest density intervals (this takes a little while) and also the most likely value. . final_results = None hdi_error_list = [] for district_name, result in results.items(): print(district_name) try: posteriors = result[&#39;posteriors&#39;][max_likelihood_index] hdis_90 = highest_density_interval(posteriors, p=.9) hdis_50 = highest_density_interval(posteriors, p=.5) most_likely = posteriors.idxmax().rename(&#39;ML&#39;) result = pd.concat([most_likely, hdis_90, hdis_50], axis=1) if final_results is None: final_results = result else: final_results = pd.concat([final_results, result]) clear_output(wait=True) except: print(f&#39;hdi failed for {district_name}&#39;) hdi_error_list.append(district_name) pass print(f&#39;HDI error list: {hdi_error_list}&#39;) print(&#39;Done.&#39;) . final_district_list = list(set(district_list) - set(hdi_error_list)) final_district_list . Plot All Districts for selected State . def plot_rt(result, ax, district_name): ax.set_title(f&quot;{district_name}&quot;) # Colors ABOVE = [1,0,0] MIDDLE = [1,1,1] BELOW = [0,0,0] cmap = ListedColormap(np.r_[ np.linspace(BELOW,MIDDLE,25), np.linspace(MIDDLE,ABOVE,25) ]) color_mapped = lambda y: np.clip(y, .5, 1.5)-.5 index = result[&#39;ML&#39;].index.get_level_values(&#39;date&#39;) values = result[&#39;ML&#39;].values # Plot dots and line ax.plot(index, values, c=&#39;k&#39;, zorder=1, alpha=.25) ax.scatter(index, values, s=40, lw=.5, c=cmap(color_mapped(values)), edgecolors=&#39;k&#39;, zorder=2) # Aesthetically, extrapolate credible interval by 1 day either side lowfn = interp1d(date2num(index), result[&#39;Low_90&#39;].values, bounds_error=False, fill_value=&#39;extrapolate&#39;) highfn = interp1d(date2num(index), result[&#39;High_90&#39;].values, bounds_error=False, fill_value=&#39;extrapolate&#39;) extended = pd.date_range(start=pd.Timestamp(&#39;2020-03-01&#39;), end=index[-1]+pd.Timedelta(days=1)) ax.fill_between(extended, lowfn(date2num(extended)), highfn(date2num(extended)), color=&#39;k&#39;, alpha=.1, lw=0, zorder=3) ax.axhline(1.0, c=&#39;k&#39;, lw=1, label=&#39;$R_t=1.0$&#39;, alpha=.25); # Formatting ax.xaxis.set_major_locator(mdates.MonthLocator()) ax.xaxis.set_major_formatter(mdates.DateFormatter(&#39;%b&#39;)) ax.xaxis.set_minor_locator(mdates.DayLocator()) ax.yaxis.set_major_locator(ticker.MultipleLocator(1)) ax.yaxis.set_major_formatter(ticker.StrMethodFormatter(&quot;{x:.1f}&quot;)) ax.yaxis.tick_right() ax.spines[&#39;left&#39;].set_visible(False) ax.spines[&#39;bottom&#39;].set_visible(False) ax.spines[&#39;right&#39;].set_visible(False) ax.margins(0) ax.grid(which=&#39;major&#39;, axis=&#39;y&#39;, c=&#39;k&#39;, alpha=.1, zorder=-2) ax.margins(0) ax.set_ylim(0.0, 5.0) ax.set_xlim(pd.Timestamp(&#39;2020-04-21&#39;), result.index.get_level_values(&#39;date&#39;)[-1]+pd.Timedelta(days=1)) fig.set_facecolor(&#39;w&#39;) . ncols = 4 nrows = int(np.ceil(len(results) / ncols)) fig, axes = plt.subplots(nrows=nrows, ncols=ncols, figsize=(15, nrows*3)) for i, (district_name, result) in enumerate(final_results.groupby(&#39;district&#39;)): plot_rt(result, axes.flat[i], district_name) fig.tight_layout() fig.set_facecolor(&#39;w&#39;) . Export Data to CSV . final_results2 = final_results.reset_index() final_results2[&#39;date&#39;] = pd.to_datetime(final_results2[&#39;date&#39;]) final_results2.head() . dft2 = dft[(dft.state==&#39;Maharashtra&#39;) &amp; (dft.district.isin(final_district_list))] . final_results2 = final_results2.sort_values([&#39;district&#39;, &#39;date&#39;], ascending=True) dft2 = dft2.sort_values([&#39;district&#39;, &#39;date&#39;], ascending=True) . final_results3 = pd.merge(dft2, final_results2, on=[&#39;district&#39;, &#39;date&#39;], how=&#39;inner&#39;) . final_results3.head() . # Uncomment the following line if you&#39;d like to export the data final_results3.to_csv(&#39;data/rt_india_selected_district.csv&#39;) . Standings . no_lockdown = [ ] partial_lockdown = [ ] FULL_COLOR = [.7,.7,.7] NONE_COLOR = [179/255,35/255,14/255] PARTIAL_COLOR = [.5,.5,.5] ERROR_BAR_COLOR = [.3,.3,.3] . final_results . filtered = final_results.index.get_level_values(0).isin(FILTERED_REGIONS) mr = final_results.loc[~filtered].groupby(level=0)[[&#39;ML&#39;, &#39;High_90&#39;, &#39;Low_90&#39;]].last() def plot_standings(mr, figsize=None, title=&#39;Most Recent $R_t$ by District&#39;): if not figsize: figsize = ((15.9/50)*len(mr)+.1,2.5) fig, ax = plt.subplots(figsize=figsize) ax.set_title(title) err = mr[[&#39;Low_90&#39;, &#39;High_90&#39;]].sub(mr[&#39;ML&#39;], axis=0).abs() bars = ax.bar(mr.index, mr[&#39;ML&#39;], width=.825, color=FULL_COLOR, ecolor=ERROR_BAR_COLOR, capsize=2, error_kw={&#39;alpha&#39;:.5, &#39;lw&#39;:1}, yerr=err.values.T) labels = mr.index.to_series() ax.set_xticklabels(labels, rotation=90, fontsize=11) ax.margins(0) ax.set_ylim(0,2.) ax.axhline(1.0, linestyle=&#39;:&#39;, color=&#39;k&#39;, lw=1) fig.set_facecolor(&#39;w&#39;) return fig, ax mr.sort_values(&#39;ML&#39;, inplace=True) plot_standings(mr); . mr.sort_values(&#39;High_90&#39;, inplace=True) plot_standings(mr); . show = mr[mr.High_90.le(1)].sort_values(&#39;ML&#39;) fig, ax = plot_standings(show, title=&#39;Likely Under Control&#39;); . show = mr[mr.Low_90.ge(1.0)].sort_values(&#39;Low_90&#39;) fig, ax = plot_standings(show, title=&#39;Likely Not Under Control&#39;); .",
            "url": "https://sanzgiri.github.io/covid-19-dashboards/2022/11/10/Realtime_R0_India_By_District.html",
            "relUrl": "/2022/11/10/Realtime_R0_India_By_District.html",
            "date": " • Nov 10, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Fastpages Notebook Blog Post",
            "content": "An Exception was encountered at &#39;In [4]&#39;. . About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Execution using papermill encountered an exception here and stopped: . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://sanzgiri.github.io/covid-19-dashboards/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post6": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://sanzgiri.github.io/covid-19-dashboards/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://sanzgiri.github.io/covid-19-dashboards/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://sanzgiri.github.io/covid-19-dashboards/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}